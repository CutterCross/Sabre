	                            ;;=========================
	                            ;; iNES header
	                            	.include "GameEngineData\header.asm"
	                            ;;;; DEFAULT HEADER FILE
	                            
	  4E 45 53 1A                   .db "NES",$1a   ;; iNES identifier
	  08                            .db $08         ;; Number of PRG-ROM banks [8]
	  00                            .db $00         ;; Number of CHR-ROM banks [0]
	  21                            .db %00100001   ;; Vertical mirroring
	                                ;;   ||||
	                                ;MAP 3210
	                                
	  00                            .db %00000000 
	                                ;;   ||||
	                                ;MAP 7654
	                                                ;; UNROM [INES mapper 2]
	                                
	  00 00 00 00 00 00 00 00       .db $00,$00,$00,$00,$00,$00,$00,$00   ;filler
	                                	                            ;;=========================
	                            ;; Constants and RAM defines 
	                            	.include "GameEngineData\sabre_includes.asm"
	                            ;;;; SABRE constants ;;;;
	                            
	                            ;;;; Notes / periods
	                            A0  = 0
	                            AS0 = 1
	                            B0  = 2
	                            C1  = 3
	                            CS1 = 4
	                            D1  = 5
	                            DS1 = 6
	                            E1  = 7
	                            F1  = 8
	                            FS1 = 9
	                            G1  = 10
	                            GS1 = 11
	                            A1  = 12
	                            AS1 = 13
	                            B1  = 14
	                            C2  = 15
	                            CS2 = 16
	                            D2  = 17
	                            DS2 = 18
	                            E2  = 19
	                            F2  = 20
	                            FS2 = 21
	                            G2  = 22
	                            GS2 = 23
	                            A2  = 24
	                            AS2 = 25
	                            B2  = 26
	                            C3  = 27
	                            CS3 = 28
	                            D3  = 29
	                            DS3 = 30
	                            E3  = 31
	                            F3  = 32
	                            FS3 = 33
	                            G3  = 34
	                            GS3 = 35
	                            A3  = 36
	                            AS3 = 37
	                            B3  = 38
	                            C4  = 39
	                            CS4 = 40
	                            D4  = 41
	                            DS4 = 42
	                            E4  = 43
	                            F4  = 44
	                            FS4 = 45
	                            G4  = 46
	                            GS4 = 47
	                            A4  = 48
	                            AS4 = 49
	                            B4  = 50
	                            C5  = 51
	                            CS5 = 52
	                            D5  = 53
	                            DS5 = 54
	                            E5  = 55
	                            F5  = 56
	                            FS5 = 57
	                            G5  = 58
	                            GS5 = 59
	                            A5  = 60
	                            AS5 = 61
	                            B5  = 62
	                            C6  = 63
	                            CS6 = 64
	                            D6  = 65
	                            DS6 = 66
	                            E6  = 67
	                            F6  = 68
	                            FS6 = 69
	                            G6  = 70
	                            GS6 = 71
	                            A6  = 72
	                            AS6 = 73
	                            B6  = 74
	                            C7  = 75
	                            CS7 = 76
	                            D7  = 77
	                            DS7 = 78
	                            E7  = 79
	                            F7  = 80
	                            FS7 = 81
	                            G7  = 82
	                            GS7 = 83
	                            A7  = 84
	                            AS7 = 85
	                            B7  = 86
	                            
	                            NOTE_CEILING = 87
	                            NOTE_LENGTHS_START = 97
	                            ;;;;;;;;;;;;;;;;;;;;
	                            
	                            ;;;; Control instructions
	                            D00         = 87    ;; End of note pattern [Return and jump to next pattern]
	                            BXX         = 88    ;; End of note pattern, pattern value to jump to
	                            C00         = 89    ;; Terminate track
	                            NLC         = 90    ;; Note Length [Custom], length value
	                            FXX         = 91	;; Change Speed, speed value
	                            ZXX         = 92    ;; Set DMC Line Level [$4011], value
	                            NUL         = 93    ;; Null note value [Skip to processing envelopes]
	                            END_SFX     = 94    ;; End SFX playback [Restore current channel]
	                            
	                            ;;;; Instruments [64 Max]
	                            INST        = 128   ;; Bitwise OR | with instrument index value [0-63]
	                            CONT        = 64    ;; Bitwise OR | with instrument index value [0-63]
	                                                ;; - Process next byte
	                            SLNT        = 0     ;; Silence note
	                            
	                            ;;;; Envelope constants
	                            ENV_LOOP    = 128   ;; Jump to Envelope Loop Point, Loop point value
	                            
	                            ;;;; Channel Header Constants
	                            NULL_pulse1     = 0 ;; Track doesn't use pulse 1
	                            NULL_pulse2     = 0 ;; Track doesn't use pulse 2
	                            NULL_triangle   = 0 ;; Track doesn't use triangle
	                            NULL_noise      = 0 ;; Track doesn't use noise
	                            NULL_DMC        = 0 ;; Track doesn't use DMC
	                            ;;;;;;;;;;;;;;;;;;;;
	                            
	                            ;;;; Common Note Lengths [FT rows] 
	                            NL1         = 97
	                            NL2         = 98
	                            NL3         = 99
	                            NL4         = 100
	                            NL5         = 101
	                            NL6         = 102
	                            NL7         = 103
	                            NL8         = 104
	                            NL9         = 105
	                            NL10        = 106
	                            NL11        = 107
	                            NL12        = 108
	                            NL13        = 109
	                            NL14        = 110
	                            NL15        = 111
	                            NL16        = 112
	                            ;;;;
	                            NL18        = 113
	                            NL20        = 114
	                            NL22        = 115
	                            NL24        = 116
	                            NL26        = 117
	                            NL28        = 118
	                            NL30        = 119
	                            NL32        = 120
	                            ;;;;
	                            NL36        = 121
	                            NL40        = 122
	                            ;;;;
	                            NL48        = 123
	                            NL64        = 124
	                            NL96        = 125
	                            NL128       = 126
	                            ;;;;
	                            NL256       = 127
	                            ;;;;;;;;;;;;;;;;;;;;
	                            	.include "GameEngineData\memoryMap.asm"
	                            ZP_RAM = $0000
	                            SOUND_RAM = $0100
	                            SHADOW_OAM = $0200
	                            
	                            ;;;; ZERO PAGE VARIABLES
	                                .enum ZP_RAM
00000                           		vBlankTimer			.dsb 1
00001                           		doNMI				.dsb 1
00002                           		gameHandler 		.dsb 1
00003                           	;;	7 6 5 4 3 2 1 0
00003                           	;;	| + + + + + + + -- ???
00003                           	;;	+ ---------------- [1] Ready to do vBlank PPU updates
00003                           		soft2000			.dsb 1
00004                           		soft2001			.dsb 1
00005                           		XSCROLL				.dsb 1
00006                           		YSCROLL				.dsb 1
00007                           		temp				.dsb 1
00008                           		temp1				.dsb 1
00009                           		temp2				.dsb 1
0000A                           		temp3				.dsb 1
0000B                           		temp4				.dsb 1
0000C                           		temp5				.dsb 1
0000D                           		temp6				.dsb 1
0000E                           		temp7				.dsb 1
0000F                           		tempA				.dsb 1
00010                           		tempB				.dsb 1
00011                           		tempC				.dsb 1
00012                           		tempD				.dsb 1
00013                           		temp16				.dsb 2
00015                           		currentPRGbank		.dsb 1
00016                           		curCPUscanlines		.dsb 1
00017                           		maxCPUscanlines		.dsb 1
00018                           		gamepad				.dsb 1
00019                           		last_gamepad		.dsb 1
0001A                           		pressed_gamepad		.dsb 1
0001B                           		cursorY 			.dsb 1
0001C                           		trackRestartStatus	.dsb 1
0001D                           		
0001D                           		;; Sabre ZP RAM vars
0001D                           		.include "GameEngineData\sabre_ZP_RAM.asm"
0001D                           ;;;; SABRE ZP RAM ;;;;
0001D                           	soundRegion						.dsb 1
0001E                           	;sabreTemp 						.dsb 1
0001E                           	;pointer16						.dsb 2
0001E                           	;envelopeAddr					.dsb 2
0001E                           	;instrumentAddr					.dsb 2
0001E                           	channel_trackAddr 				.dsb 18
00030                           	channel_patternOffsetAddr		.dsb 18
00042                           
00042                           	sabreTemp = temp
00042                           	instrumentAddr = temp1
00042                           	pointer16 = temp16
00042                           	envelopeAddr = temp16
00042                           
00042                           	;; 44 bytes ZP 
00042                           	;; [37 used]00042                           	.ende
	                            	
	                            ;;;; OVERFLOW RAM VARIABLES 
	                            	.enum SOUND_RAM
00100                           		;; Sabre misc RAM vars
00100                           		.include "GameEngineData\sabre_Misc_RAM.asm"
00100                           ;;;; SABRE Misc RAM [Non-ZP] ;;;;
00100                           
00100                           	apuShadow4000X				.dsb 8
00108                           	apuShadow4002X				.dsb 8
00110                           	apuShadow4003X				.dsb 6
00116                           	dmcStatus					.dsb 1	;; [0] Play new sample; [1] Don't update
00117                           	apuLast4003					.dsb 1
00118                           	apuLast4007					.dsb 1
00119                           
00119                           	apuShadow4000 = apuShadow4000X
00119                           	apuShadow4002 = apuShadow4002X
00119                           	apuShadow4003 = apuShadow4003X
00119                           	apuShadow4004 = apuShadow4000X+2
00119                           	apuShadow4006 = apuShadow4002X+2
00119                           	apuShadow4007 = apuShadow4003X+2
00119                           	apuShadow4008 = apuShadow4000X+4
00119                           	apuShadow400A = apuShadow4002X+4
00119                           	apuShadow400B = apuShadow4003X+4
00119                           	apuShadow400C = apuShadow4000X+6
00119                           	apuShadow400E = apuShadow4002X+6
00119                           	apuSFX4000 = apuShadow4000X+1
00119                           	apuSFX4002 = apuShadow4002X+1
00119                           	apuSFX4003 = apuShadow4003X+1
00119                           	apuSFX4004 = apuShadow4000X+3
00119                           	apuSFX4006 = apuShadow4002X+3
00119                           	apuSFX4007 = apuShadow4003X+3
00119                           	apuSFX4008 = apuShadow4000X+5
00119                           	apuSFX400A = apuShadow4002X+5
00119                           	apuSFX400B = apuShadow4003X+5
00119                           	apuSFX400C = apuShadow4000X+7
00119                           	apuSFX400E = apuShadow4002X+7
00119                           
00119                           	sabrePauseStatus 			.dsb 1
0011A                           	channelMuteStatus			.dsb 9
00123                           	channelNoteDuration			.dsb 9
0012C                           	channelNoteCountdown		.dsb 9
00135                           	channelInstrument 			.dsb 9
0013E                           	channelVolEnvelopeStep		.dsb 8
00146                           	channelArpEnvelopeStep		.dsb 8
0014E                           	channelPitchEnvelopeStep	.dsb 6
00154                           	channelDutyEnvelopeStep		.dsb 4
00158                           	channelBaseNote 			.dsb 9
00161                           	channelLastArpNote			.dsb 9
0016A                           	
0016A                           	trackSpeed					.dsb 1	;; Number of frames between rows
0016B                           	SFXspeed					.dsb 1	;; Number of frames between rows
0016C                           	trackFrameTimer				.dsb 1	;; Cowntdown frame timer until next note change
0016D                           	SFXframeTimer				.dsb 1	;; Cowntdown frame timer until next note change
0016E                           	trackCurrentPattern			.dsb 1
0016F                           	trackMaxPatterns			.dsb 1
00170                           
00170                           	currentTrack				.dsb 1
00171                           	currentSFX					.dsb 1
00172                           	currentTrackPRGbank			.dsb 1
00173                           
00173                           	;; 115 bytes non-ZP 
00173                           	
00173                           	00173                           	.ende 
	                            		                            ;;=========================
	                            ;; Handle bank assignments
	                            	.base $8000
08000                           	.include "GameEngineData\BankData\UNROM_Bank00.asm"
08000                           ;; UNROM Bank $00
08000                           CHR_BCKtest:
08000 00 00 00 00 00 00 00 00.. .incbin "GameEngineData\PPU_DATA\BCKtest.chr"
09000                           .include "sabre_testData.asm"
09000                           ;;;; SABRE MOCKUP DATA ;;;;
09000                           
09000                           ;;;; Static bank data ;;;;
09000                           sabre_maxTracks:
09000 02                        	.db 2
09001                           sabre_maxSFX:
09001 02                        	.db 2
09002                           
09002                           ;;;; Track pointers + PRG bank number
09002                           trackHeaderTable_lo:
09002 0F A3                     	.db <_Intermission1_header, <_testSong0_header
09004                           trackHeaderTable_hi:
09004 92 92                     	.db >_Intermission1_header, >_testSong0_header
09006                           trackTable_PRGbank:
09006 00 00                     	.db $00,$00
09008                           
09008                           ;;;; SFX pointers + PRG bank number 
09008                           sfxHeaderTable_lo:
09008 DC EB                     	.db <_sfx_error_header, <_sfx_downSlide_header
0900A                           sfxHeaderTable_hi:
0900A 91 91                     	.db >_sfx_error_header, >_sfx_downSlide_header
0900C                           
0900C                           ;;;; All envelopes used by each instrument
0900C                           env0:
0900C 00 80 00                  	.db 0,ENV_LOOP,0
0900F                           env1:
0900F 0C 0B 07 06 05 04 04 03.. 	.db 12,11,7,6,5,4,4,3,3,2,2,2,1,1,0,ENV_LOOP,14
09020                           env2:
09020 40 80 00                  	.db 64,ENV_LOOP,0
09023                           env3:
09023 04 80 00                  	.db 4,ENV_LOOP,0
09026                           env4:
09026 03 80 00                  	.db 3,ENV_LOOP,0
09029                           env5:
09029 02 80 00                  	.db 2,ENV_LOOP,0
0902C                           env6:
0902C 01 01 00 00 FF FF FF FF.. 	.db 1,1,0,0,-1,-1,-1,-1,0,0,1,1,ENV_LOOP,0
0903A                           env7:
0903A 08 80 00                  	.db 8,ENV_LOOP,0
0903D                           env8:
0903D 0C 00 80 01               	.db 12,0,ENV_LOOP,1
09041                           env9:
09041 08 07 06 03 02 01 00 80.. 	.db 8,7,6,3,2,1,0,ENV_LOOP,6 
0904A                           env10:
0904A 08 07 06 06 05 05 05 05.. 	.db 8,7,6,6,5,5,5,5,4,4,4,4,4,3,3,3,3,3,2,2,2,2,2,2,1,ENV_LOOP,24
09065                           env11:
09065 18 80 00                  	.db 24,ENV_LOOP,0
09068                           
09068                           ;;;; All instruments
09068                           instrumentHeaderTable:
09068 84 91                     	.dw inst_silent
0906A 8C 91 94 91 9C 91 A4 91   	.dw inst_test0,inst_V02_4_Vib,inst_V02_3_Vib,inst_V02_2_Vib
09072 AC 91 B4 91 BC 91 C4 91   	.dw inst_TriBlip_Hold,inst_HiHatShort,inst_HiHatLong,inst_V00_8
0907A CC 91 D4 91               	.dw inst_V00_8_SD,inst_V00_8_arpTest
0907E                           	
0907E                           ;;;; Starting addresses for each DPCM sample [$4012] 
0907E                           dpcm_sampleAddressTable:
0907E 24                          .db <(dpcm_sample_00_17byte_dmc >> 6)
0907F 25                          .db <(dpcm_sample_FF_17byte_dmc >> 6)
09080 26                          .db <(dpcm_sample_Kick20Drum1_dmc >> 6)
09081 2D                          .db <(dpcm_sample_SnareDrum2_dmc >> 6)
09082                           
09082                           ;;;; Maps a sample index to each FT note
09082                           dpcm_noteToSampleTable:
09082 00 01 FF FF FF FF FF FF.. 	.db $00,$01,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
09091 FF FF FF FF FF FF FF FF..   	.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
090A9 FF FF FF 02 02 02 02 02..   	.db $ff,$ff,$ff,$02,$02,$02,$02,$02,$02,$02,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
090C1 FF FF FF FF FF FF FF FF..   	.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$03,$03,$03,$03,$03,$03,$03,$03
090D8                           
090D8                           ;;;; Maps a sample playback rate and loop flag to each FT note [$4010]
090D8                           dpcm_noteToSampleRateAndFlags:
090D8 00 00 FF FF FF FF FF FF.. 	.db $00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
090E7 FF FF FF FF FF FF FF FF..   	.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
090FF FF FF FF 0F 0E 0C 0A 08..   	.db $ff,$ff,$ff,$0f,$0e,$0c,$0a,$08,$04,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
09117 FF FF FF FF FF FF FF FF..   	.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$0f,$0e,$0d,$0c,$0b,$0a,$09,$08
0912E                           
0912E                           ;;;; Maps a sample length to a each FT note	[$4013]
0912E                           dpcm_noteToSampleLength:
0912E 01 01 FF FF FF FF FF FF.. 	.db $01,$01,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
0913D FF FF FF FF FF FF FF FF..   	.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
09155 FF FF FF 19 19 19 19 19..   	.db $ff,$ff,$ff,$19,$19,$19,$19,$19,$19,$19,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
0916D FF FF FF FF FF FF FF FF..   	.db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$19,$19,$19,$19,$19,$19,$19,$19
09184                           
09184                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
09184                           
09184                           inst_silent:
09184 0C 90                     	.dw env0	;; Volume
09186 0C 90                     	.dw env0	;; Arpeggio
09188 0C 90                     	.dw env0	;; Pitch
0918A 0C 90                     	.dw env0	;; Duty
0918C                           inst_test0:
0918C 0F 90                     	.dw env1	;; Volume
0918E 0C 90                     	.dw env0	;; Arpeggio
09190 0C 90                     	.dw env0	;; Pitch
09192 20 90                     	.dw env2	;; Duty
09194                           inst_V02_4_Vib:
09194 23 90                     	.dw env3	;; Volume
09196 0C 90                     	.dw env0	;; Arpeggio
09198 2C 90                     	.dw env6	;; Pitch
0919A 20 90                     	.dw env2	;; Duty
0919C                           inst_V02_3_Vib:
0919C 26 90                     	.dw env4	;; Volume
0919E 0C 90                     	.dw env0	;; Arpeggio
091A0 2C 90                     	.dw env6	;; Pitch
091A2 20 90                     	.dw env2	;; Duty
091A4                           inst_V02_2_Vib:
091A4 29 90                     	.dw env5	;; Volume
091A6 0C 90                     	.dw env0	;; Arpeggio
091A8 2C 90                     	.dw env6	;; Pitch
091AA 20 90                     	.dw env2	;; Duty
091AC                           inst_TriBlip_Hold:
091AC 3A 90                     	.dw env7	;; Volume
091AE 3D 90                     	.dw env8	;; Arpeggio
091B0 2C 90                     	.dw env6	;; Pitch
091B2 20 90                     	.dw env2	;; Duty
091B4                           inst_HiHatShort:
091B4 41 90                     	.dw env9	;; Volume
091B6 0C 90                     	.dw env0	;; Arpeggio
091B8 0C 90                     	.dw env0	;; Pitch
091BA 20 90                     	.dw env2	;; Duty
091BC                           inst_HiHatLong:
091BC 4A 90                     	.dw env10	;; Volume
091BE 0C 90                     	.dw env0	;; Arpeggio
091C0 0C 90                     	.dw env0	;; Pitch
091C2 20 90                     	.dw env2	;; Duty
091C4                           inst_V00_8:
091C4 3A 90                     	.dw env7	;; Volume
091C6 0C 90                     	.dw env0	;; Arpeggio
091C8 0C 90                     	.dw env0	;; Pitch
091CA 0C 90                     	.dw env0	;; Duty
091CC                           inst_V00_8_SD:
091CC 3A 90                     	.dw env7	;; Volume
091CE 0C 90                     	.dw env0	;; Arpeggio
091D0 65 90                     	.dw env11	;; Pitch
091D2 0C 90                     	.dw env0	;; Duty
091D4                           inst_V00_8_arpTest:
091D4 3A 90                     	.dw env7	;; Volume
091D6 2C 90                     	.dw env6	;; Arpeggio
091D8 0C 90                     	.dw env0	;; Pitch
091DA 0C 90                     	.dw env0	;; Duty
091DC                           	
091DC                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
091DC                           
091DC                           _sfx_error_header:
091DC 05                        	.db 5					;; Speed [frames in-between rows]
091DD 00 00                     	.dw NULL_pulse1
091DF E5 91                     	.dw _sfx_error_pulse2
091E1 00 00                     	.dw NULL_triangle
091E3 00 00                     	.dw NULL_noise 
091E5                           _sfx_error_pulse2:
091E5 62 C7 0E 64 09 5E         	.db NL2,INST|CONT|7,B1,NL4,FS1,END_SFX
091EB                           
091EB                           _sfx_downSlide_header:
091EB 06                        	.db 6					;; Speed [frames in-between rows]
091EC F4 91                     	.dw _sfx_downSlide_pulse1
091EE FA 91                     	.dw _sfx_downSlide_pulse2
091F0 02 92                     	.dw _sfx_downSlide_triangle
091F2 0A 92                     	.dw _sfx_downSlide_noise
091F4                           _sfx_downSlide_pulse1:
091F4 68 C8 1E 64 89 5E         	.db NL8,INST|CONT|8,DS3,NL4,INST|9,END_SFX
091FA                           _sfx_downSlide_pulse2:
091FA 62 5D 66 C8 23 65 89 5E   	.db NL2,NUL,NL6,INST|CONT|8,GS3,NL5,INST|9,END_SFX
09202                           _sfx_downSlide_triangle:
09202 64 5D 64 C8 31 66 89 5E   	.db NL4,NUL,NL4,INST|CONT|8,AS4,NL6,INST|9,END_SFX 
0920A                           _sfx_downSlide_noise:
0920A 67 5D C7 07 5E            	.db NL7,NUL,INST|CONT|7,$8^$F,END_SFX
0920F                           
0920F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0920F                           
0920F                           ;;;; Dynamic track data [any PRG bank] ;;;;
0920F                           
0920F                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0920F                           
0920F                           _Intermission1_header:
0920F 07                        	.db 7					;; Speed [frames in-between rows]
09210 02                        	.db 2					;; Total FT frames
09211 1B 92                     	.dw _Intermission1_pulse1
09213 39 92                     	.dw _Intermission1_pulse2
09215 53 92                     	.dw _Intermission1_triangle
09217 77 92                     	.dw _Intermission1_noise 
09219 92 92                     	.dw _Intermission1_dmc
0921B                           
0921B                           _Intermission1_pulse1:
0921B 1F 92                     	.dw _Intermission1_pulse1_pattern0
0921D 1F 92                     	.dw _Intermission1_pulse1_pattern0
0921F                           _Intermission1_pulse1_pattern0:
0921F 62 C3 19 C2 11 12 19 C3.. 	.db NL2,INST|CONT|3,AS2,INST|CONT|2,D2,DS2,AS2,INST|CONT|3,AS2 
09228 C2 12 14 19 C3 19 C2 11.. 	.db INST|CONT|2,DS2,F2,AS2,INST|CONT|3,AS2,INST|CONT|2,D2,F2,AS2 
09232 C3 19 C2 12 14 19 57      	.db INST|CONT|3,AS2,INST|CONT|2,DS2,F2,AS2,D00
09239                           
09239                           _Intermission1_pulse2:
09239 3D 92                     	.dw _Intermission1_pulse2_pattern0
0923B 3D 92                     	.dw _Intermission1_pulse2_pattern0
0923D                           _Intermission1_pulse2_pattern0:
0923D 61 5D 62 C4 19 19 11 12.. 	.db NL1,NUL,NL2,INST|CONT|4,AS2,AS2,D2,DS2,AS2,AS2,DS2,F2,AS2,AS2 
0924B 11 14 19 19 12 61 14 57   	.db D2,F2,AS2,AS2,DS2,NL1,F2,D00
09253                           
09253                           _Intermission1_triangle:
09253 57 92                     	.dw _Intermission1_triangle_pattern0
09255 63 92                     	.dw _Intermission1_triangle_pattern1
09257                           _Intermission1_triangle_pattern0:
09257 66 C5 11 6A 12 66 14 12.. 	.db NL6,INST|CONT|5,D2,NL10,DS2,NL6,F2,DS2,NL2,A2,AS2,D00
09263                           _Intermission1_triangle_pattern1:
09263 66 C5 11 62 12 0A 64 0D.. 	.db NL6,INST|CONT|5,D2,NL2,DS2,G1,NL4,AS1,NL2,DS2,D2,G1,AS1
09270 64 0F 62 08 64 0D 57      	.db NL4,C2,NL2,F1,NL4,AS1,D00
09277                           
09277                           _Intermission1_noise:
09277 7B 92                     	.dw _Intermission1_noise_pattern0
09279 7B 92                     	.dw _Intermission1_noise_pattern0
0927B                           _Intermission1_noise_pattern0:
0927B 64 C7 00 62 86 64 02 62.. 	.db NL4,INST|CONT|7,$F^$F,NL2,INST|6,NL4,$D^$F,NL2,$F^$F,$D^$F,$F^$F
09286 64 C7 00 62 86 64 02 62.. 	.db NL4,INST|CONT|7,$F^$F,NL2,INST|6,NL4,$D^$F,NL2,$F^$F,$D^$F,$F^$F,D00 
09292                           
09292                           _Intermission1_dmc:
09292 96 92                     	.dw _Intermission1_dmc_pattern0
09294 96 92                     	.dw _Intermission1_dmc_pattern0
09296                           _Intermission1_dmc_pattern0:
09296 66 2A 68 4F 62 2B 66 2A.. 	.db NL6,DS4,NL8,E7,NL2,E4,NL6,DS4,E7,NL2,DS4,A7,D00
092A3                           
092A3                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
092A3                           
092A3                           _testSong0_header:
092A3 06                        	.db 6					;; Speed [frames in-between rows]
092A4 02                        	.db 2					;; Total FT frames
092A5 AF 92                     	.dw _testSong0_pulse1
092A7 00 00                     	.dw NULL_pulse2		
092A9 00 00                     	.dw NULL_triangle	
092AB 00 00                     	.dw NULL_noise
092AD 00 00                     	.dw NULL_DMC		
092AF                           
092AF                           _testSong0_pulse1:
092AF B3 92                     	.dw _testSong0_pulse1_pattern0
092B1 BF 92                     	.dw _testSong0_pulse1_pattern1
092B3                           _testSong0_pulse1_pattern0:
092B3 62 C2 1B 1D 1F 66 80 C1.. 	.db NL2,INST|CONT|2,C3,D3,E3,NL6,INST|SLNT,INST|CONT|1,NL2,B3,C4,D00
092BF                           _testSong0_pulse1_pattern1:
092BF 64 C1 27 62 26 64 24 66.. 	.db NL4,INST|CONT|1,C4,NL2,B3,NL4,A3,NL6,G3,D00
092C9                           
092C9                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
092C9                           
092C9                           
092C9 00 00 00 00 00 00 00 00.. 	.pad $c000
0C000                           	.base $8000
08000                           	.include "GameEngineData\BankData\UNROM_Bank01.asm"
08000                           ;; UNROM Bank $0108000 00 00 00 00 00 00 00 00.. 	.pad $c000
0C000                           	.base $8000
08000                           	.include "GameEngineData\BankData\UNROM_Bank02.asm"
08000                           ;; UNROM Bank $0208000 00 00 00 00 00 00 00 00.. 	.pad $c000
0C000                           	.base $8000
08000                           	.include "GameEngineData\BankData\UNROM_Bank03.asm"
08000                           ;; UNROM Bank $0308000 00 00 00 00 00 00 00 00.. 	.pad $c000
0C000                           	.base $8000
08000                           	.include "GameEngineData\BankData\UNROM_Bank04.asm"
08000                           ;; UNROM Bank $0408000 00 00 00 00 00 00 00 00.. 	.pad $c000
0C000                           	.base $8000
08000                           	.include "GameEngineData\BankData\UNROM_Bank05.asm"
08000                           ;; UNROM Bank $0508000 00 00 00 00 00 00 00 00.. 	.pad $c000
0C000                           	.base $8000
08000                           	.include "GameEngineData\BankData\UNROM_Bank06.asm"
08000                           ;; UNROM Bank $0608000 00 00 00 00 00 00 00 00.. 	.pad $c000
0C000                           ;;=========================
0C000                           ;; Reset
0C000                           	.include "GameEngineData\reset.asm"
0C000                           
0C000                           RESET:
0C000 78                            SEI         ;; Ignore interrupts for the reset
0C001 D8                            CLD         ;; Disable decimal mode 
0C002 A2 FF                         LDX #$FF        
0C004 9A                            TXS         ;; Initialize the stack
0C005 E8                            INX
0C006 8E 00 20                      STX $2000   ;; Disable NMI
0C009 8E 01 20                      STX $2001   ;; Disable rendering
0C00C 8E 10 40                      STX $4010   ;; Disable DMC IRQ 
0C00F 8E 15 40                      STX $4015   ;; Disable APU sound
0C012 A9 40                         LDA #64
0C014 8D 17 40                      STA $4017   ;; Disable Frame Counter IRQ
0C017                               
0C017                           ;; First vblank 
0C017 2C 02 20                      BIT $2002
0C01A 20 00 C1                      JSR waitVBlankCycle
0C01D                               
0C01D                           ;; Clear all ram 
0C01D A2 00                         LDX #$00
0C01F                           clrMemLoop:
0C01F A9 FE                         LDA #$FE        ;; Instead of zero, write #$FE to 0200,x
0C021 9D 00 02                      STA $0200,x     ;; To place sprites off screen
0C024 9D 00 04                      STA $0400,x     ;; and object RAM as well
0C027 A9 00                         LDA #$00
0C029 95 00                         STA $0000,x
0C02B 9D 00 01                      STA $0100,x 
0C02E 9D 00 03                      STA $0300,x
0C031 9D 00 05                      STA $0500,x
0C034 9D 00 06                      STA $0600,x
0C037 9D 00 07                      STA $0700,x
0C03A E8                            INX
0C03B D0 E2                         BNE clrMemLoop
0C03D                               
0C03D                           ;; Second vblank 
0C03D 20 00 C1                      JSR waitVBlankCycle
0C040 20 00 C1                      JSR waitVBlankCycle
0C043                           ;;=========================
0C043                           ;; Initialization + game loop
0C043                           	.include "GameEngineData\initialization.asm"
0C043                           ;;;; Initialization
0C043 20 73 C1                  	JSR loadSoundTestScreen
0C046                           	
0C046                           ;;;; Get ready to enable rendering	
0C046                           	
0C046                           	;; Enable NMI
0C046 A9 90                         LDA #%10010000  ;; Turn on NMI, set sprites $0000, bkg to $1000
0C048 8D 00 20                      STA $2000
0C04B 85 03                         STA soft2000
0C04D                               ;; Init PPUSCROLL
0C04D A0 00                         LDY #0
0C04F 8C 05 20                      STY $2005
0C052 8C 05 20                      STY $2005
0C055                               ;; UNROM bank init
0C055 20 33 C1                      JSR UNROM_bankswitchY
0C058                           
0C058 20 00 C1                      JSR waitVBlankCycle
0C05B 20 0C C1                      JSR getTVSystem
0C05E 85 1D                     	STA soundRegion
0C060 20 0A F1                  	JSR sabre_initAPU
0C063 A9 80                         LDA #%10000000
0C065 85 02                         STA gameHandler
0C067                           	
0C067 A9 18                     	LDA #%00011000
0C069 8D 01 20                  	STA $2001
0C06C 85 04                         STA soft2001
0C06E                           
0C06E A9 00                         LDA #0
0C070 8D 70 01                  	STA currentTrack
0C073 20 4B F1                  	JSR sabre_playTrack0C076                           	.include "GameEngineData\mainGameLoop.asm"
0C076                           MainGameLoop:
0C076 A5 00                     	LDA vBlankTimer
0C078                           vBlankTimerLoop:
0C078 C5 00                     	CMP vBlankTimer
0C07A F0 FC                     	BEQ vBlankTimerLoop
0C07C 20 2A C2                  	JSR spriteOverflowPolling
0C07F A9 1A                     	LDA #%00011010
0C081 8D 01 20                  	STA $2001
0C084                           	;;;; Sabre update ;;;;
0C084 AC 72 01                  	LDY currentTrackPRGbank
0C087 20 35 C1                  	JSR UNROM_bankswitchNoSave
0C08A 20 58 F2                  	JSR sabre_soundUpdate
0C08D A4 15                     	LDY currentPRGbank
0C08F 20 35 C1                  	JSR UNROM_bankswitchNoSave
0C092                           	;;;;;;;;;;;;;;;;;;;;;;
0C092 A9 18                     	LDA #%00011000
0C094 8D 01 20                  	STA $2001
0C097 20 37 C2                  	JSR spriteZeroHitPolling_countScanlines
0C09A 20 00 C4                  	JSR doHandleButtonScripts
0C09D 4C 76 C0                  	JMP MainGameLoop0C0A0                           ;;=========================
0C0A0                           ;; NMI
0C0A0                           	.include "GameEngineData\NMI.asm"
0C0A0                           NMI:
0C0A0 08                        	PHP
0C0A1 48                        	PHA
0C0A2 A5 01                     	LDA doNMI
0C0A4 F0 03                     	BEQ dontSkipNMI
0C0A6 4C DE C0                  		JMP skipWholeNMI
0C0A9                           dontSkipNMI:
0C0A9 8A                        	TXA 
0C0AA 48                        	PHA
0C0AB 98                        	TYA 
0C0AC 48                        	PHA 
0C0AD E6 01                     	INC doNMI
0C0AF                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C0AF E6 00                     	INC vBlankTimer
0C0B1                           	;; Update OAM and inputs
0C0B1 A9 00                     	LDA #0
0C0B3 8D 01 20                  	STA $2001
0C0B6 8D 03 20                  	STA $2003
0C0B9 A9 02                     	LDA #2
0C0BB 8D 14 40                  	STA $4014
0C0BE 20 E8 C3                  	JSR doHandleInputs	;; get put get put get put
0C0C1                           
0C0C1 24 02                     	BIT gameHandler 
0C0C3 10 0E                     	BPL endVBlankPPUupdates
0C0C5                           		;; Update PPU things
0C0C5 2C 02 20                  		BIT $2002
0C0C8 20 CF C2                  		JSR updateParameterInfo
0C0CB A9 00                     		LDA #0 
0C0CD 8D 05 20                  		STA $2005 
0C0D0 8D 05 20                  		STA $2005
0C0D3                           endVBlankPPUupdates:
0C0D3 A9 18                     	LDA #%00011000
0C0D5 8D 01 20                  	STA $2001
0C0D8                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C0D8 C6 01                     	DEC doNMI 
0C0DA 68                        	PLA
0C0DB A8                        	TAY 
0C0DC 68                        	PLA 
0C0DD AA                        	TAX 
0C0DE                           skipWholeNMI:
0C0DE 68                        	PLA	
0C0DF 28                        	PLP
0C0E0 40                        	RTI	0C0E1                           ;;=========================
0C0E1                           ;; $C000 Subroutines
0C0E1                           	.include "GameEngineData\c000_subroutines.asm"
0C0E1 00 00 00 00 00 00 00 00.. .align 32
0C100                           
0C100                           waitVBlankCycle:
0C100 2C 02 20                  	BIT $2002
0C103 10 FB                     	BPL waitVBlankCycle
0C105 60                        	RTS
0C106                           
0C106                           DEX_waitLoop:
0C106 CA                        	DEX 
0C107 D0 FD                     	BNE DEX_waitLoop
0C109 24 07                     	BIT temp 
0C10B 60                        	RTS
0C10C                           	
0C10C                           getTVSystem:
0C10C A2 00                         LDX #0
0C10E A0 00                         LDY #0
0C110 A5 00                         LDA vBlankTimer
0C112                           -nmiwait1:
0C112 C5 00                         CMP vBlankTimer
0C114 F0 FC                         BEQ -nmiwait1
0C116 A5 00                         LDA vBlankTimer
0C118                           -nmiwait2:
0C118                               ;; Each iteration takes 11 cycles.
0C118                               ;; NTSC NES: 29780 cycles or 2707 = $A93 iterations
0C118                               ;; PAL NES:  33247 cycles or 3022 = $BCE iterations
0C118                               ;; Dendy:    35464 cycles or 3224 = $C98 iterations
0C118                               ;; so we can divide by $100 (rounding down), subtract ten,
0C118                               ;; and end up with 0=ntsc, 1=pal, 2=dendy, 3=unknown
0C118 E8                            INX 
0C119 D0 01                         BNE +nminoiny
0C11B C8                            INY 
0C11C                           +nminoiny:
0C11C C5 00                         CMP vBlankTimer
0C11E F0 F8                         BEQ -nmiwait2
0C120 98                            TYA 
0C121 38                            SEC 
0C122 E9 0A                         SBC #10
0C124 C9 03                         CMP #3
0C126 90 02                         BCC +notAbove3
0C128 A9 03                         LDA #3
0C12A                           +notAbove3:
0C12A 60                            RTS
0C12B                           	
0C12B                           UNROM_bankTable:
0C12B 00 01 02 03 04 05 06 07   	.db $00,$01,$02,$03,$04,$05,$06,$07
0C133                           
0C133                           UNROM_bankswitchY:
0C133 84 15                     	STY currentPRGbank
0C135                           UNROM_bankswitchNoSave:
0C135 B9 2B C1                  	LDA UNROM_bankTable,y 
0C138 99 2B C1                  	STA UNROM_bankTable,y 
0C13B 60                        	RTS 
0C13C                           	
0C13C                           UNROM_loadCHR:
0C13C A9 00                     	LDA #<CHR_BCKtest
0C13E 85 13                     	STA temp16 
0C140 A9 80                     	LDA #>CHR_BCKtest
0C142 85 14                     	STA temp16+1
0C144 A0 00                     	LDY #0
0C146 A2 10                     	LDX #16
0C148 8C 06 20                  	STY $2006
0C14B 8C 06 20                  	STY $2006
0C14E                           loop_writePatternTable0:
0C14E B1 13                     	LDA (temp16),y 
0C150 8D 07 20                  	STA $2007
0C153 C8                        	INY 
0C154 D0 F8                     	BNE loop_writePatternTable0
0C156 E6 14                     	INC temp16+1
0C158 CA                        	DEX 
0C159 D0 F3                     	BNE loop_writePatternTable0
0C15B A9 00                     	LDA #<CHR_BCKtest
0C15D 85 13                     	STA temp16 
0C15F A9 80                     	LDA #>CHR_BCKtest
0C161 85 14                     	STA temp16+1
0C163 A2 10                     	LDX #16
0C165                           loop_writePatternTable1:
0C165 B1 13                     	LDA (temp16),y 
0C167 8D 07 20                  	STA $2007
0C16A C8                        	INY 
0C16B D0 F8                     	BNE loop_writePatternTable1
0C16D E6 14                     	INC temp16+1 
0C16F CA                        	DEX 
0C170 D0 F3                     	BNE loop_writePatternTable1
0C172 60                        	RTS
0C173                           
0C173                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0C173                           	
0C173                           loadSoundTestScreen:
0C173                           	;;;; Load palette
0C173 2C 02 20                  	BIT $2002
0C176 A2 3F                         LDX #$3F
0C178 8E 06 20                      STX $2006
0C17B A2 00                     	LDX #$00
0C17D 8E 06 20                      STX $2006
0C180                           	-
0C180 BD B5 C8                  	LDA SABRE_soundTest_PAL,x
0C183 8D 07 20                  	STA $2007
0C186 E8                        	INX 
0C187 E0 20                     	CPX #32
0C189 90 F5                     	BCC -
0C18B                           	;;;; Load CHR 
0C18B 20 3C C1                  	JSR UNROM_loadCHR
0C18E                           	;;;; Load nametables + attributes
0C18E                           	;; $2000
0C18E A0 20                     	LDY #$20
0C190 8C 06 20                  	STY $2006
0C193 A0 00                     	LDY #$00
0C195 8C 06 20                  	STY $2006
0C198 A2 04                     	LDX #4
0C19A A9 B5                     	LDA #<SABRE_soundTest_NAM
0C19C 85 13                     	STA temp16
0C19E A9 C4                     	LDA #>SABRE_soundTest_NAM
0C1A0 85 14                     	STA temp16+1 
0C1A2                           	-
0C1A2 B1 13                     	LDA (temp16),y 
0C1A4 8D 07 20                  	STA $2007
0C1A7 C8                        	INY 
0C1A8 D0 F8                     	BNE -
0C1AA E6 14                     	INC temp16+1 
0C1AC CA                        	DEX 
0C1AD D0 F3                     	BNE -
0C1AF                           	;; $2400
0C1AF A9 00                     	LDA #0
0C1B1 A2 04                     	LDX #4
0C1B3                           	-
0C1B3 8D 07 20                  	STA $2007
0C1B6 88                        	DEY 
0C1B7 D0 FA                     	BNE -
0C1B9 CA                        	DEX 
0C1BA D0 F7                     	BNE -
0C1BC                           	;;;; Set up sprite 0
0C1BC A9 90                     	LDA #144
0C1BE 8D 00 02                  	STA SHADOW_OAM
0C1C1 A9 20                     	LDA #32
0C1C3 8D 03 02                  	STA SHADOW_OAM+3
0C1C6 A9 01                     	LDA #1
0C1C8 8D 01 02                  	STA SHADOW_OAM+1
0C1CB A9 23                     	LDA #%00100011
0C1CD 8D 02 02                  	STA SHADOW_OAM+2
0C1D0                           	;;;; Set up input cursor sprite
0C1D0 A9 7F                     	LDA #127
0C1D2 8D 04 02                  	STA SHADOW_OAM+4
0C1D5 A9 2B                     	LDA #43
0C1D7 8D 07 02                  	STA SHADOW_OAM+7
0C1DA A9 1F                     	LDA #$1F
0C1DC 8D 05 02                  	STA SHADOW_OAM+5
0C1DF A9 00                     	LDA #0
0C1E1 8D 06 02                  	STA SHADOW_OAM+6
0C1E4                           	;;;; Set up 9 sprite overflow sprites
0C1E4 A2 08                     	LDX #8
0C1E6                           	-
0C1E6 A9 5F                     	LDA #95
0C1E8 9D 00 02                  	STA SHADOW_OAM,x
0C1EB A9 00                     	LDA #0
0C1ED 9D 01 02                  	STA SHADOW_OAM+1,x
0C1F0 9D 02 02                  	STA SHADOW_OAM+2,x
0C1F3 9D 03 02                  	STA SHADOW_OAM+3,x
0C1F6 E8                        	INX 
0C1F7 E8                        	INX 
0C1F8 E8                        	INX 
0C1F9 E8                        	INX
0C1FA E0 2C                     	CPX #44
0C1FC 90 E8                     	BCC -
0C1FE                           	;; Set up overlay sprites
0C1FE                           	-
0C1FE BD E6 C1                  	LDA sabreLogoOverlaySpritesTable-44,x 
0C201 9D 00 02                  	STA SHADOW_OAM,x 
0C204 E8                        	INX 
0C205 E0 44                     	CPX #68
0C207 90 F5                     	BCC -
0C209 A9 FE                     	LDA #254
0C20B                           	-
0C20B 9D 00 02                  	STA SHADOW_OAM,x
0C20E E8                        	INX 
0C20F D0 FA                     	BNE -
0C211 60                        	RTS
0C212                           
0C212                           sabreLogoOverlaySpritesTable:
0C212 37 8F 02 40               	.db 55,$8f,%00000010,64
0C216 2F 7F 02 40               	.db 47,$7f,%00000010,64
0C21A 27 6D 02 40               	.db 39,$6d,%00000010,64
0C21E 1F 5D 02 40               	.db 31,$5d,%00000010,64
0C222 27 88 02 48               	.db 39,$88,%00000010,72
0C226 1F 68 02 48               	.db 31,$68,%00000010,72
0C22A                           	
0C22A                           spriteOverflowPolling:
0C22A A9 A0                     	LDA #%10100000
0C22C                           	-
0C22C 2C 02 20                  	BIT $2002
0C22F D0 FB                     	BNE -
0C231                           	-
0C231 2C 02 20                  	BIT $2002
0C234 F0 FB                     	BEQ -
0C236 60                        	RTS
0C237                           
0C237                           spriteZeroHitPolling_countScanlines:
0C237 A0 0F                     	LDY #15
0C239 A9 80                     	LDA #<NTSC_3dotAlign
0C23B 85 13                     	STA pointer16 
0C23D A9 C2                     	LDA #>NTSC_3dotAlign
0C23F 85 14                     	STA pointer16+1
0C241 A5 1D                     	LDA soundRegion
0C243 29 01                     	AND #$01 
0C245 F0 0A                     	BEQ +
0C247 A9 95                     		LDA #<PAL_5dotAlign
0C249 85 13                     		STA pointer16 
0C24B A9 C2                     		LDA #>PAL_5dotAlign
0C24D 85 14                     		STA pointer16+1
0C24F A0 0D                     		LDY #13
0C251                           	+
0C251 A9 C0                     	LDA #%11000000
0C253 A2 00                     	LDX #0			;; Number of scanlines elapsed
0C255 86 07                     	STX temp		;; Reset dot alignment counter
0C257                           	-
0C257 2C 02 20                  	BIT $2002
0C25A D0 FB                     	BNE -
0C25C                           -countScanlines:
0C25C E8                        	INX 
0C25D                           	-
0C25D 88                        	DEY 
0C25E D0 FD                     	BNE -
0C260 6C 13 00                  	JMP (pointer16)
0C263                           dotAlignReturn:
0C263 2C 02 20                  	BIT $2002
0C266 F0 F4                     	BEQ -countScanlines
0C268                           	;; X contains number of scanlines elapsed to sprite0 hit
0C268 8A                        	TXA 
0C269 38                        	SEC 
0C26A E9 32                     	SBC #50
0C26C 49 FF                     	EOR #$FF 
0C26E                           	;; Accumulator now has number of scanlines SABRE used
0C26E 85 16                     	STA curCPUscanlines
0C270 C5 17                     	CMP maxCPUscanlines
0C272 90 02                     	BCC +
0C274 85 17                     		STA maxCPUscanlines
0C276                           	+
0C276 60                        	RTS
0C277                           	
0C277 00 00 00 00 00 00 00 00.. .align 16
0C280                           NTSC_3dotAlign:
0C280 E6 07                     	INC temp 
0C282 A4 07                     	LDY temp 
0C284 C0 03                     	CPY #3
0C286 A0 00                     	LDY #0
0C288 B0 03                     	BCS +
0C28A EA                        		NOP 
0C28B 90 02                     		BCC ++
0C28D                           	+
0C28D 84 07                     	STY temp 
0C28F                           	++
0C28F A0 0F                     	LDY #15
0C291 EA                        	NOP 
0C292 4C 63 C2                  	JMP dotAlignReturn
0C295                           PAL_5dotAlign:
0C295 E6 07                     	INC temp
0C297 A4 07                         LDY temp 
0C299 C0 05                         CPY #5
0C29B A0 00                         LDY #0
0C29D B0 04                         BCS +
0C29F 24 07                             BIT temp
0C2A1 90 02                             BCC ++
0C2A3                               +
0C2A3 84 07                         STY temp
0C2A5                               ++
0C2A5 A0 0D                     	LDY #13
0C2A7 EA                        	NOP 
0C2A8 EA                        	NOP
0C2A9 4C 63 C2                  	JMP dotAlignReturn
0C2AC                           
0C2AC                           convertToBase10_digits:
0C2AC                               ;; Initial value in A
0C2AC 85 07                         STA temp 
0C2AE A0 FF                         LDY #$FF
0C2B0 38                            SEC 
0C2B1                               ;; Get hundreds place
0C2B1                               -
0C2B1 C8                            INY
0C2B2 E9 64                         SBC #100
0C2B4 B0 FB                         BCS -
0C2B6 84 0A                         STY temp3
0C2B8                               ;; Get tens place
0C2B8 69 64                         ADC #100 
0C2BA A0 FF                         LDY #$FF
0C2BC                               -
0C2BC C8                            INY
0C2BD E9 0A                         SBC #10
0C2BF B0 FB                         BCS -
0C2C1 84 09                         STY temp2 
0C2C3                               ;; Get ones place
0C2C3 69 0A                         ADC #10
0C2C5 A0 FF                         LDY #$FF 
0C2C7                               -
0C2C7 C8                            INY 
0C2C8 E9 01                         SBC #1
0C2CA B0 FB                         BCS -
0C2CC 84 08                         STY temp1 
0C2CE 60                            RTS     ;; 35
0C2CF                           
0C2CF                           updateParameterInfo:
0C2CF                           	TEXT_BASE = $A0
0C2CF                           	CHANNEL_ENABLED_TILE = $1E
0C2CF                           	CHANNEL_DISABLED_TILE = $1D
0C2CF                           	;;;; Set Current CPU Scanline usage
0C2CF A9 21                     	LDA #$21
0C2D1 8D 06 20                  	STA $2006 
0C2D4 A9 48                     	LDA #$48
0C2D6 8D 06 20                  	STA $2006
0C2D9 A5 16                     	LDA curCPUscanlines
0C2DB 20 AC C2                  	JSR convertToBase10_digits
0C2DE A5 0A                     	LDA temp3
0C2E0 18                        	CLC 
0C2E1 69 A0                     	ADC #TEXT_BASE
0C2E3 8D 07 20                  	STA $2007
0C2E6 A5 09                     	LDA temp2 
0C2E8 69 A0                     	ADC #TEXT_BASE 
0C2EA 8D 07 20                  	STA $2007 
0C2ED A5 08                     	LDA temp1
0C2EF 69 A0                     	ADC #TEXT_BASE 
0C2F1 8D 07 20                  	STA $2007
0C2F4                           	;;;; Set Max CPU Scanline usage
0C2F4 A9 21                     	LDA #$21 
0C2F6 8D 06 20                  	STA $2006 
0C2F9 A9 59                     	LDA #$59 
0C2FB 8D 06 20                  	STA $2006 
0C2FE A5 17                     	LDA maxCPUscanlines
0C300 20 AC C2                  	JSR convertToBase10_digits
0C303 A5 0A                     	LDA temp3
0C305 18                        	CLC 
0C306 69 A0                     	ADC #TEXT_BASE
0C308 8D 07 20                  	STA $2007
0C30B A5 09                     	LDA temp2 
0C30D 69 A0                     	ADC #TEXT_BASE 
0C30F 8D 07 20                  	STA $2007 
0C312 A5 08                     	LDA temp1
0C314 69 A0                     	ADC #TEXT_BASE 
0C316 8D 07 20                  	STA $2007
0C319                           	;;;; Set channel volume meters
0C319 A9 22                     	LDA #$22
0C31B 8D 06 20                  	STA $2006
0C31E A9 12                     	LDA #$12
0C320 8D 06 20                  	STA $2006 
0C323                           	;; Pulse 1
0C323 AD 01 01                  	LDA apuSFX4000 
0C326 D0 03                     	BNE +
0C328 AD 00 01                  		LDA apuShadow4000 
0C32B                           	+
0C32B 20 C3 C3                  	JSR loop_soundEquUpdateTiles
0C32E A9 22                     	LDA #$22
0C330 8D 06 20                  	STA $2006
0C333 A9 52                     	LDA #$52
0C335 8D 06 20                  	STA $2006 
0C338                           	;; Pulse 2
0C338 AD 03 01                  	LDA apuSFX4004 
0C33B D0 03                     	BNE +
0C33D AD 02 01                  		LDA apuShadow4004
0C340                           	+
0C340 20 C3 C3                  	JSR loop_soundEquUpdateTiles
0C343 A9 22                     	LDA #$22
0C345 8D 06 20                  	STA $2006
0C348 A9 92                     	LDA #$92
0C34A 8D 06 20                  	STA $2006 
0C34D                           	;; Triangle 
0C34D A2 08                     	LDX #8
0C34F A0 0B                         LDY #$0B
0C351 AD 05 01                  	LDA apuSFX4008
0C354 D0 03                     	BNE +
0C356 AD 04 01                      	LDA apuShadow4008
0C359                           	+
0C359 29 7F                         AND #%01111111
0C35B D0 02                         BNE +
0C35D C8                                INY 
0C35E C8                                INY
0C35F                               +
0C35F                               -
0C35F 8C 07 20                      STY $2007
0C362 CA                            DEX 
0C363 D0 FA                         BNE -
0C365 A9 22                     	LDA #$22
0C367 8D 06 20                  	STA $2006
0C36A A9 D2                     	LDA #$D2
0C36C 8D 06 20                  	STA $2006 
0C36F                           	;; Noise 
0C36F AD 07 01                  	LDA apuSFX400C 
0C372 D0 03                     	BNE +
0C374 AD 06 01                  		LDA apuShadow400C 
0C377                           	+
0C377 20 C3 C3                  	JSR loop_soundEquUpdateTiles
0C37A A9 23                     	LDA #$23
0C37C 8D 06 20                  	STA $2006
0C37F A9 12                     	LDA #$12
0C381 8D 06 20                  	STA $2006 
0C384                           	;; DMC 
0C384 A2 08                     	LDX #8
0C386 A0 0B                         LDY #$0B
0C388 AD 15 40                  	LDA $4015
0C38B 29 10                     	AND #%00010000
0C38D D0 02                         BNE +
0C38F C8                                INY 
0C390 C8                                INY
0C391                               +
0C391                               -
0C391 8C 07 20                      STY $2007
0C394 CA                            DEX 
0C395 D0 FA                         BNE -
0C397                           	;;;; Set correct tiles for channel enable status
0C397 A9 94                     	LDA #%10010100		;; Set 32 increment mode
0C399 8D 00 20                  	STA $2000
0C39C A9 22                     	LDA #$22
0C39E 8D 06 20                  	STA $2006
0C3A1 A9 07                     	LDA #$07
0C3A3 8D 06 20                  	STA $2006
0C3A6                           	-
0C3A6 A9 1E                     	LDA #CHANNEL_ENABLED_TILE
0C3A8 BC 1A 01                  	LDY channelMuteStatus,x
0C3AB D0 02                     	BNE +
0C3AD A9 1D                     		LDA #CHANNEL_DISABLED_TILE
0C3AF                           	+
0C3AF 8D 07 20                  	STA $2007
0C3B2 29 00                     	AND #0
0C3B4 8D 07 20                  	STA $2007
0C3B7 E8                        	INX 
0C3B8 E8                        	INX
0C3B9 E0 0A                     	CPX #10
0C3BB 90 E9                     	BCC -
0C3BD A9 90                     	LDA #%10010000		;; Set back to 1 increment mode
0C3BF 8D 00 20                  	STA $2000
0C3C2 60                        	RTS
0C3C3                           
0C3C3                           loop_soundEquUpdateTiles:
0C3C3 4B 0F                         ALR #%00001111
0C3C5 AA                            TAX 
0C3C6 E8                            INX
0C3C7 A0 08                         LDY #8
0C3C9 A9 0B                         LDA #$0B
0C3CB                               -
0C3CB CA                            DEX 
0C3CC F0 06                         BEQ +
0C3CE 8D 07 20                      STA $2007
0C3D1 88                            DEY 
0C3D2 D0 F7                         BNE -
0C3D4                               +
0C3D4 90 06                         BCC +
0C3D6 A9 0C                         LDA #$0C 
0C3D8 8D 07 20                      STA $2007
0C3DB 88                            DEY 
0C3DC                               +
0C3DC 88                            DEY 
0C3DD F0 08                         BEQ +
0C3DF A9 0D                         LDA #$0D
0C3E1                               -
0C3E1 8D 07 20                      STA $2007
0C3E4 88                            DEY 
0C3E5 D0 FA                         BNE -
0C3E7                               +
0C3E7 60                            RTS
0C3E8                           
0C3E8                           .include "GameEngineData\handleInputs.asm"
0C3E8                           doHandleInputs:
0C3E8 A5 18                         LDA gamepad             ;; get put get
0C3EA 85 19                         STA last_gamepad        ;; put get put
0C3EC A2 01                         LDX #1                  ;; get put
0C3EE 86 18                         STX gamepad             ;; get put get
0C3F0 8E 16 40                      STX $4016               ;; put get put GET
0C3F3 CA                            DEX                     ;; put get
0C3F4 8E 16 40                      STX $4016               ;; put get put GET
0C3F7                           gamepadPollingLoop:
0C3F7 AD 16 40                      LDA $4016               ;; put get put GET
0C3FA 4A                            LSR                     ;; put get
0C3FB 26 18                         ROL gamepad             ;; put get put get put
0C3FD 90 F8                         BCC gamepadPollingLoop  ;; get put [get]
0C3FF 60                            RTS0C400                           .include "GameEngineData\handleButtonScripts.asm"
0C400                           doHandleButtonScripts:
0C400 A5 19                         LDA last_gamepad 
0C402 49 FF                         EOR #$FF 
0C404 25 18                         AND gamepad 
0C406 85 1A                         STA pressed_gamepad
0C408                               ;;;; STANDARD GAMEPAD READS ;;;;
0C408 A9 01                         LDA #%00000001
0C40A                               ;;;;;;;; RIGHT PRESSED ;;;;;;;;;
0C40A 24 1A                         BIT pressed_gamepad
0C40C F0 17                         BEQ endRightInput_pressed
0C40E                                   ;; Increment track
0C40E AD 70 01                          LDA currentTrack
0C411 18                                CLC
0C412 69 01                             ADC #1
0C414 CD 00 90                          CMP sabre_maxTracks
0C417 90 02                             BCC +
0C419 A9 00                                 LDA #0
0C41B                                   +
0C41B 8D 70 01                          STA currentTrack
0C41E 20 4B F1                          JSR sabre_playTrack
0C421                                   ;; Reset track stop status
0C421 A9 00                             LDA #0
0C423 85 1C                             STA trackRestartStatus
0C425                           endRightInput_pressed:
0C425 A9 02                         LDA #%00000010
0C427                               ;;;;;;;; LEFT PRESSED ;;;;;;;;;;
0C427 24 1A                         BIT pressed_gamepad
0C429 F0 15                         BEQ endLeftInput_pressed
0C42B                                   ;; Decrement track
0C42B AD 70 01                          LDA currentTrack
0C42E D0 06                             BNE +
0C430 AD 00 90                              LDA sabre_maxTracks
0C433 8D 70 01                              STA currentTrack
0C436                                   +
0C436 CE 70 01                          DEC currentTrack
0C439 20 4B F1                          JSR sabre_playTrack
0C43C                                   ;; Reset track stop status
0C43C A9 00                             LDA #0 
0C43E 85 1C                             STA trackRestartStatus
0C440                           endLeftInput_pressed:
0C440 A9 04                         LDA #%00000100
0C442                               ;;;;;;;;; DOWN PRESSED ;;;;;;;;;
0C442 24 1A                         BIT pressed_gamepad
0C444 F0 0C                         BEQ endDownInput_pressed
0C446                                   ;; Move cursor down
0C446 A5 1B                             LDA cursorY
0C448 C9 04                             CMP #4
0C44A 90 04                             BCC +
0C44C A9 FF                                 LDA #255
0C44E 85 1B                                 STA cursorY
0C450                                   +
0C450 E6 1B                             INC cursorY 
0C452                           endDownInput_pressed:
0C452 A9 08                         LDA #%00001000
0C454                               ;;;;;;;;;; UP PRESSED ;;;;;;;;;;
0C454 24 1A                         BIT pressed_gamepad
0C456 F0 0A                         BEQ endUpInput_pressed
0C458                                   ;; Move cursor up
0C458 A5 1B                             LDA cursorY
0C45A D0 04                             BNE +
0C45C A9 05                                 LDA #5
0C45E 85 1B                                 STA cursorY
0C460                                   +
0C460 C6 1B                             DEC cursorY
0C462                           endUpInput_pressed:
0C462 A9 10                         LDA #%00010000
0C464                               ;;;;;;;;; START PRESSED ;;;;;;;;
0C464 24 1A                         BIT pressed_gamepad
0C466 F0 03                         BEQ endStartInput_pressed
0C468 20 37 F5                          JSR sabre_pauseTrack
0C46B                           endStartInput_pressed:
0C46B A9 20                         LDA #%00100000
0C46D                               ;;;;;;;; SELECT PRESSED ;;;;;;;
0C46D 24 1A                         BIT pressed_gamepad
0C46F F0 11                         BEQ endSelectInput_pressed
0C471                                   ;; Toggle stopSong / restart song
0C471 A5 1C                             LDA trackRestartStatus
0C473 49 FF                             EOR #$FF 
0C475 85 1C                             STA trackRestartStatus
0C477 F0 06                             BEQ +
0C479 20 1B F5                              JSR sabre_stopTrack
0C47C 4C 8E C4                              JMP endB_Input_pressed
0C47F                                   +
0C47F 20 4B F1                              JSR sabre_playTrack
0C482                           endSelectInput_pressed:
0C482                               ;;;;;;;;;; B PRESSED ;;;;;;;;;;;
0C482 24 1A                         BIT pressed_gamepad
0C484 50 08                         BVC endB_Input_pressed
0C486 A9 01                             LDA #1
0C488 8D 71 01                          STA currentSFX
0C48B 20 D6 F1                          JSR sabre_playSFX
0C48E                           endB_Input_pressed:
0C48E                               ;;;;;;;;;; A PRESSED ;;;;;;;;;;;
0C48E 24 1A                         BIT pressed_gamepad
0C490 10 15                         BPL endA_Input_pressed
0C492 A5 1B                             LDA cursorY
0C494 0A                                ASL 
0C495 AA                                TAX
0C496 E0 08                             CPX #8
0C498 D0 05                             BNE +
0C49A A9 0F                                 LDA #%00001111
0C49C 8D 15 40                              STA $4015
0C49F                                   +
0C49F BD 1A 01                          LDA channelMuteStatus,x 
0C4A2 49 FF                             EOR #$FF 
0C4A4 9D 1A 01                          STA channelMuteStatus,x 
0C4A7                           endA_Input_pressed:
0C4A7                           
0C4A7                           ;;;; Update cursor Y position
0C4A7 A6 1B                         LDX cursorY
0C4A9 BD B0 C4                      LDA cursorYpositionTable,x
0C4AC 8D 04 02                      STA SHADOW_OAM+4
0C4AF 60                            RTS
0C4B0                           
0C4B0                           cursorYpositionTable:
0C4B0 7F 8F 9F AF C0            	.db 127, 143, 159, 175, 1920C4B5                           	
0C4B5                           .include "GameEngineData\PPU_DATA\SABRE_soundTest_NAM_ATT.asm"
0C4B5                           SABRE_soundTest_NAM:
0C4B5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C4C5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C4D5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C4E5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C4F5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C505 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C515 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C525 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C535 00 00 5A 5B 5C 5C 5C 5C.. 	.byte $00,$00,$5a,$5b,$5c,$5c,$5c,$5c,$00,$5e,$56,$51,$52,$53,$56,$51
0C545 52 55 56 54 52 55 56 54.. 	.byte $52,$55,$56,$54,$52,$55,$56,$54,$52,$55,$56,$54,$52,$53,$56,$5f
0C555 00 00 6A 6B 59 59 59 6C.. 	.byte $00,$00,$6a,$6b,$59,$59,$59,$6c,$00,$6e,$60,$61,$62,$63,$60,$61
0C565 65 66 60 61 65 67 60 61.. 	.byte $65,$66,$60,$61,$65,$67,$60,$61,$65,$67,$60,$61,$62,$64,$05,$6f
0C575 00 79 7A 7B 69 69 69 7C.. 	.byte $00,$79,$7a,$7b,$69,$69,$69,$7c,$7d,$50,$70,$71,$72,$73,$74,$75
0C585 72 73 74 75 72 76 74 75.. 	.byte $72,$73,$74,$75,$72,$76,$74,$75,$72,$76,$74,$75,$77,$78,$7e,$00
0C595 00 89 8A 58 58 58 8B 8C.. 	.byte $00,$89,$8a,$58,$58,$58,$8b,$8c,$8d,$57,$80,$81,$82,$57,$83,$84
0C5A5 85 57 86 81 82 57 83 84.. 	.byte $85,$57,$86,$81,$82,$57,$83,$84,$85,$57,$86,$81,$87,$57,$8e,$00
0C5B5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C5C5 00 00 44 45 46 47 48 00.. 	.byte $00,$00,$44,$45,$46,$47,$48,$00,$49,$47,$4a,$4b,$47,$49,$00,$00
0C5D5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C5E5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C5F5 00 00 00 00 AC B9 BE 00.. 	.byte $00,$00,$00,$00,$ac,$b9,$be,$00,$a0,$a0,$a0,$00,$00,$00,$00,$00
0C605 B9 AE AA B4 00 AC B9 BE.. 	.byte $b9,$ae,$aa,$b4,$00,$ac,$b9,$be,$00,$a0,$a0,$a0,$00,$00,$00,$00
0C615 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C625 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C635 1B 00 00 00 09 09 09 09.. 	.byte $1b,$00,$00,$00,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
0C645 09 09 09 09 09 09 09 09.. 	.byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$00,$00,$00
0C655 1C 00 00 00 08 00 00 00.. 	.byte $1c,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C665 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00
0C675 1C 00 00 00 09 09 09 09.. 	.byte $1c,$00,$00,$00,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
0C685 09 09 09 09 09 09 09 09.. 	.byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$00,$00,$00
0C695 05 00 00 00 08 00 00 00.. 	.byte $05,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C6A5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00
0C6B5 05 00 00 00 08 00 00 1E.. 	.byte $05,$00,$00,$00,$08,$00,$00,$1e,$00,$b9,$be,$b5,$bc,$ae,$00,$a1
0C6C5 00 0A 0D 0D 0D 0D 0D 0D.. 	.byte $00,$0a,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$00,$08,$00,$00,$00,$00
0C6D5 05 00 00 00 08 00 00 00.. 	.byte $05,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C6E5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00
0C6F5 05 00 00 00 08 00 00 1E.. 	.byte $05,$00,$00,$00,$08,$00,$00,$1e,$00,$b9,$be,$b5,$bc,$ae,$00,$a2
0C705 00 0A 0D 0D 0D 0D 0D 0D.. 	.byte $00,$0a,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$00,$08,$00,$00,$00,$00
0C715 05 00 18 00 08 00 00 00.. 	.byte $05,$00,$18,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C725 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$19,$00,$00
0C735 05 00 28 00 08 00 00 1E.. 	.byte $05,$00,$28,$00,$08,$00,$00,$1e,$00,$bd,$bb,$b2,$aa,$b7,$b0,$b5
0C745 AE 0A 0D 0D 0D 0D 0D 0D.. 	.byte $ae,$0a,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$00,$08,$00,$29,$00,$00
0C755 05 00 00 00 08 00 00 00.. 	.byte $05,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C765 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00
0C775 05 00 00 00 08 00 00 1E.. 	.byte $05,$00,$00,$00,$08,$00,$00,$1e,$00,$b7,$b8,$b2,$bc,$ae,$00,$00
0C785 00 0A 0D 0D 0D 0D 0D 0D.. 	.byte $00,$0a,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$00,$08,$00,$00,$00,$00
0C795 05 00 00 00 08 00 00 00.. 	.byte $05,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C7A5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00
0C7B5 05 00 00 00 08 00 00 1E.. 	.byte $05,$00,$00,$00,$08,$00,$00,$1e,$00,$ad,$b6,$ac,$00,$00,$00,$00
0C7C5 00 0A 0D 0D 0D 0D 0D 0D.. 	.byte $00,$0a,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$00,$08,$00,$00,$00,$00
0C7D5 05 00 00 00 08 00 00 00.. 	.byte $05,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C7E5 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00
0C7F5 05 00 00 00 09 09 09 09.. 	.byte $05,$00,$00,$00,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
0C805 09 09 09 09 09 09 09 09.. 	.byte $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$00,$00,$00
0C815 05 00 00 00 00 00 00 1A.. 	.byte $05,$00,$00,$00,$00,$00,$00,$1a,$00,$4c,$46,$4d,$4d,$49,$4e,$4c
0C825 4E 45 44 44 00 4F 45 4F.. 	.byte $4e,$45,$44,$44,$00,$4f,$45,$4f,$4f,$00,$00,$00,$00,$00,$00,$00
0C835 05 00 00 00 00 00 00 00.. 	.byte $05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C845 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C855 05 00 00 00 00 00 00 00.. 	.byte $05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C865 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C875 00 00 00 00 00 00 00 00.. 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$aa,$aa,$55,$55,$55,$55,$55,$55
0C885 00 00 00 00 08 0A 0A 0A.. 	.byte $00,$00,$00,$00,$08,$0a,$0a,$0a,$46,$55,$55,$55,$55,$55,$55,$11
0C895 04 99 00 00 00 00 44 01.. 	.byte $04,$99,$00,$00,$00,$00,$44,$01,$40,$99,$00,$00,$00,$00,$44,$10
0C8A5 44 59 50 50 50 50 54 11.. 	.byte $44,$59,$50,$50,$50,$50,$54,$11,$00,$00,$00,$00,$00,$00,$00,$00
0C8B5                           
0C8B5                           .include "GameEngineData\PPU_DATA\SABRE_soundTest_PAL.asm"
0C8B5                           SABRE_soundTest_PAL:
0C8B5 0F 0C 22 33               	.db $0f, $0c, $22, $33
0C8B9 0F 05 15 26               	.db $0f, $05, $15, $26
0C8BD 0F 01 12 22               	.db $0f, $01, $12, $22
0C8C1 0F 36 15 26               	.db $0f, $36, $15, $26
0C8C5                           	
0C8C5 0F 0C 22 33               	.db $0f, $0c, $22, $33
0C8C9 0F 0F 0F 0F               	.db $0f, $0f, $0f, $0f
0C8CD 0F 01 12 22               	.db $0f, $01, $12, $22
0C8D1 0F 0F 0F 0F               	.db $0f, $0f, $0f, $0f0C8D5 00 00 00 00 00 00 00 00.. .align 64
0C900                           .include "sabre_dpcm.asm"0C900                           dpcm_sample_00_17byte_dmc:
0C900 00 00 00 00 00 00 00 00..   .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C911 00 00 00 00 00 00 00 00..   .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C929 00 00 00 00 00 00 00 00..   .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C940                           
0C940                           dpcm_sample_FF_17byte_dmc:
0C940 FF FF FF FF FF FF FF FF..   .db $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff
0C951 00 00 00 00 00 00 00 00..   .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C969 00 00 00 00 00 00 00 00..   .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0C980                           
0C980                           dpcm_sample_Kick20Drum1_dmc:
0C980 55 55 55 55 55 55 55 55..   .db $55,$55,$55,$55,$55,$55,$55,$55,$e3,$e7,$e0,$5d,$8b,$d5,$a3,$0d,$e6,$cc,$e3,$78,$70,$78,$30,$10
0C998 00 82 B0 80 07 56 55 56..   .db $00,$82,$b0,$80,$07,$56,$55,$56,$55,$bd,$b4,$de,$e5,$37,$fd,$c7,$ff,$cf,$ff,$fe,$ba,$7c,$d9,$b4
0C9B0 AA 96 E2 83 87 5C A4 94..   .db $aa,$96,$e2,$83,$87,$5c,$a4,$94,$06,$59,$60,$01,$82,$00,$00,$80,$a0,$28,$52,$aa,$aa,$aa,$d4,$66
0C9C8 D5 65 D3 9B BE 35 FE DA..   .db $d5,$65,$d3,$9b,$be,$35,$fe,$da,$eb,$5f,$d7,$7f,$fd,$d5,$eb,$cb,$76,$53,$55,$6b,$99,$aa,$2a,$55
0C9E0 25 55 25 A9 94 A4 0A 91..   .db $25,$55,$25,$a9,$94,$a4,$0a,$91,$92,$44,$45,$94,$92,$a8,$50,$65,$29,$ac,$94,$55,$2a,$9b,$52,$2d
0C9F8 E9 92 6A 93 D2 4A 96 56..   .db $e9,$92,$6a,$93,$d2,$4a,$96,$56,$aa,$54,$2d,$55,$ad,$b2,$aa,$5a,$53,$6b,$ad,$da,$56,$5b,$db,$ba
0CA10 7A 6D DB F6 EE B6 DD 6D..   .db $7a,$6d,$db,$f6,$ee,$b6,$dd,$6d,$5b,$5b,$ab,$56,$b5,$aa,$2a,$55,$55,$29,$95,$52,$52,$25,$a9,$48
0CA28 4A 92 4A 48 0A 49 84 10..   .db $4a,$92,$4a,$48,$0a,$49,$84,$10,$22,$20,$92,$50,$52,$a9,$52,$55,$55,$55,$55,$ab,$6a,$b5,$5a,$db
0CA40 6A 6D AB DB DA B6 76 EB..   .db $6a,$6d,$ab,$db,$da,$b6,$76,$eb,$b6,$5d,$dd,$bb,$db,$ed,$6e,$bb,$b5,$b5,$56,$ad,$5a,$55,$55,$55
0CA58 A5 AA 52 A5 52 29 29 A5..   .db $a5,$aa,$52,$a5,$52,$29,$29,$a5,$24,$25,$29,$29,$49,$92,$24,$49,$25,$49,$92,$92,$92,$a4,$a4,$94
0CA70 52 29 95 AA 54 55 A9 AA..   .db $52,$29,$95,$aa,$54,$55,$a9,$aa,$aa,$aa,$5a,$55,$ad,$5a,$ad,$d6,$6a,$ab,$b5,$b6,$d6,$d6,$d6,$d6
0CA88 D6 56 6D 5B 6B 5B 6B AD..   .db $d6,$56,$6d,$5b,$6b,$5b,$6b,$ad,$ad,$56,$ab,$56,$ab,$6a,$55,$55,$55,$55,$55,$a5,$2a,$95,$2a,$55
0CAA0 2A A5 52 4A A5 54 52 29..   .db $2a,$a5,$52,$4a,$a5,$54,$52,$29,$a5,$52,$95,$4a,$a5,$52,$a9,$2a,$55,$a9,$aa,$aa,$54,$55,$55,$55
0CAB8 55 55 55 D5 AA AA AA 56..   .db $55,$55,$55,$d5,$aa,$aa,$aa,$56,$55,$55,$55,$b5,$aa,$aa,$aa,$aa,$aa,$55,$55,$ad,$aa,$aa,$5a,$55
0CAD0 AB AA 55 55 55 AD AA 56..   .db $ab,$aa,$55,$55,$55,$ad,$aa,$56,$55,$b5,$aa,$aa,$aa,$aa,$aa,$a5,$a9,$aa,$aa,$aa,$56,$95,$55,$55
0CAE8 55 55 55 55 55 AA AA AA..   .db $55,$55,$55,$55,$55,$aa,$aa,$aa,$4a,$55,$55,$55,$aa,$aa,$2a,$55,$55,$55,$55,$a5,$aa,$aa,$54,$55
0CB00 55 55 25 25 25 25 25 25..   .db $55,$55,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25
0CB11 00 00 00 00 00 00 00 00..   .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0CB29 00 00 00 00 00 00 00 00..   .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0CB40                           
0CB40                           dpcm_sample_SnareDrum2_dmc:
0CB40 15 FE FF 7F 1C 0E 00 00..   .db $15,$fe,$ff,$7f,$1c,$0e,$00,$00,$00,$38,$33,$fe,$ff,$ff,$67,$00,$76,$1e,$ff,$ff,$0f,$00,$00,$00
0CB58 00 00 F0 FF FF 3F 00 00..   .db $00,$00,$f0,$ff,$ff,$3f,$00,$00,$00,$c6,$ff,$ff,$ff,$ff,$ff,$1f,$07,$e0,$fe,$38,$37,$00,$00,$00
0CB70 0F 00 18 E0 1F E2 FC F9..   .db $0f,$00,$18,$e0,$1f,$e2,$fc,$f9,$e0,$ff,$ff,$ff,$ff,$ff,$07,$04,$00,$00,$06,$00,$00,$e0,$3f,$0c
0CB88 E0 7F F7 FF FE FF C7 83..   .db $e0,$7f,$f7,$ff,$fe,$ff,$c7,$83,$fb,$88,$c7,$4f,$07,$02,$00,$40,$00,$00,$70,$88,$fd,$ff,$f9,$ef
0CBA0 79 E6 FF FF 1F 19 04 1F..   .db $79,$e6,$ff,$ff,$1f,$19,$04,$1f,$00,$18,$10,$00,$20,$80,$83,$cb,$f4,$ee,$ef,$ff,$ff,$bf,$7f,$1d
0CBB8 CF 31 61 01 80 00 00 0C..   .db $cf,$31,$61,$01,$80,$00,$00,$0c,$c0,$5c,$fc,$68,$3f,$ff,$f3,$ff,$8c,$b9,$fd,$00,$0f,$ce,$77,$c8
0CBD0 0D 01 4C 40 00 7B C8 46..   .db $0d,$01,$4c,$40,$00,$7b,$c8,$46,$8e,$cf,$b9,$f7,$f4,$ff,$e7,$3f,$e0,$1c,$f0,$80,$60,$2c,$0c,$18
0CBE8 71 F0 63 0E E7 E3 0F F3..   .db $71,$f0,$63,$0e,$e7,$e3,$0f,$f3,$8f,$e0,$f7,$2f,$82,$39,$39,$0e,$d8,$87,$c3,$e0,$16,$43,$7e,$f0
0CC00 88 0C 18 FF 70 7E FC 3F..   .db $88,$0c,$18,$ff,$70,$7e,$fc,$3f,$7e,$cc,$66,$0e,$18,$30,$06,$47,$3c,$3c,$c2,$cf,$3c,$13,$e3,$de
0CC18 1C D8 CD C6 CC 58 8F 8D..   .db $1c,$d8,$cd,$c6,$cc,$58,$8f,$8d,$87,$19,$cf,$d0,$43,$cc,$71,$c5,$61,$e0,$11,$fe,$cc,$0d,$7f,$d4
0CC30 4F 24 3F C1 0B CC 39 19..   .db $4f,$24,$3f,$c1,$0b,$cc,$39,$19,$dc,$f8,$24,$1e,$db,$70,$38,$cb,$c1,$d7,$f1,$50,$33,$f8,$e4,$a3
0CC48 E1 61 3E 32 92 1F EC E1..   .db $e1,$61,$3e,$32,$92,$1f,$ec,$e1,$70,$36,$36,$b8,$c3,$8c,$8f,$c6,$39,$33,$87,$9e,$8d,$33,$7c,$70
0CC60 12 3E CC C2 17 FC 13 7C..   .db $12,$3e,$cc,$c2,$17,$fc,$13,$7c,$18,$5b,$13,$0f,$c7,$f1,$20,$8e,$3b,$ee,$ba,$31,$ec,$64,$1a,$17
0CC78 9A 15 D5 19 13 E7 31 3D..   .db $9a,$15,$d5,$19,$13,$e7,$31,$3d,$55,$c7,$66,$0e,$3c,$1b,$a6,$d2,$d9,$03,$67,$66,$d9,$16,$3d,$d8
0CC90 21 87 8F 71 1A 33 67 CC..   .db $21,$87,$8f,$71,$1a,$33,$67,$cc,$c3,$35,$4d,$d3,$e5,$62,$51,$d6,$54,$74,$56,$9a,$99,$75,$70,$15
0CCA8 17 9B 55 4D 55 53 56 73..   .db $17,$9b,$55,$4d,$55,$53,$56,$73,$1c,$d5,$c6,$34,$47,$5c,$3c,$45,$d7,$12,$5e,$93,$75,$14,$57,$ca
0CCC0 71 65 25 25 25 25 25 25..   .db $71,$65,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25,$25
0CCD1 00 00 00 00 00 00 00 00..   .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0CCE9 00 00 00 00 00 00 00 00..   .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0CD00                           
0CD00 00 00 00 00 00 00 00 00.. 	.pad $F000	;; Nice visual way to see engine size in NESsc
0F000                           	.include "GameEngineData\sabre_uo.asm"
0F000                           ;;;; SABRE Sound Engine ;;;;
0F000                           
0F000                           NTSC_PTNperiodTable_lo:
0F000 F1 7F 13                  	.db <$07F1, <$077F, <$0713
0F003 AD 4D F3 9D 4C 00 B8 74..     .db <$06AD, <$064D, <$05F3, <$059D, <$054C, <$0500, <$04B8, <$0474, <$0434, <$03F8, <$03BF, <$0389
0F00F 56 26 F9 CE A6 80 5C 3A..     .db <$0356, <$0326, <$02F9, <$02CE, <$02A6, <$0280, <$025C, <$023A, <$021A, <$01FB, <$01DF, <$01C4
0F01B AB 93 7C 67 52 3F 2D 1C..     .db <$01AB, <$0193, <$017C, <$0167, <$0152, <$013F, <$012D, <$011C, <$010C, <$00FD, <$00EF, <$00E1
0F027 D5 C9 BD B3 A9 9F 96 8E..     .db <$00D5, <$00C9, <$00BD, <$00B3, <$00A9, <$009F, <$0096, <$008E, <$0086, <$007E, <$0077, <$0070
0F033 6A 64 5E 59 54 4F 4B 46..     .db <$006A, <$0064, <$005E, <$0059, <$0054, <$004F, <$004B, <$0046, <$0042, <$003F, <$003B, <$0038
0F03F 34 31 2F 2C 29 27 25 23..     .db <$0034, <$0031, <$002F, <$002C, <$0029, <$0027, <$0025, <$0023, <$0021, <$001F, <$001D, <$001B
0F04B 1A 18 17 15 14 13 12 11..     .db <$001A, <$0018, <$0017, <$0015, <$0014, <$0013, <$0012, <$0011, <$0010, <$000F, <$000E, <$000D
0F057                           NTSC_PTNperiodTable_hi:
0F057 07 07 07                  	.db >$07F1, >$077F, >$0713
0F05A 06 06 05 05 05 05 04 04..     .db >$06AD, >$064D, >$05F3, >$059D, >$054C, >$0500, >$04B8, >$0474, >$0434, >$03F8, >$03BF, >$0389
0F066 03 03 02 02 02 02 02 02..     .db >$0356, >$0326, >$02F9, >$02CE, >$02A6, >$0280, >$025C, >$023A, >$021A, >$01FB, >$01DF, >$01C4
0F072 01 01 01 01 01 01 01 01..     .db >$01AB, >$0193, >$017C, >$0167, >$0152, >$013F, >$012D, >$011C, >$010C
0F07B                           PAL_PTNperiodTable_lo:
0F07B 60 F6 92                  	.db <$0760, <$06F6, <$0692
0F07E 34 DB 86 37 EC A5 62 23..     .db <$0634, <$05DB, <$0586, <$0537, <$04EC, <$04A5, <$0462, <$0423, <$03E8, <$03B0, <$037B, <$0349
0F08A 19 ED C3 9B 75 52 31 11..     .db <$0319, <$02ED, <$02C3, <$029B, <$0275, <$0252, <$0231, <$0211, <$01F3, <$01D7, <$01BD, <$01A4
0F096 8C 76 61 4D 3A 29 18 08..     .db <$018C, <$0176, <$0161, <$014D, <$013A, <$0129, <$0118, <$0108, <$00F9, <$00EB, <$00DE, <$00D1
0F0A2 C6 BA B0 A6 9D 94 8B 84..     .db <$00C6, <$00BA, <$00B0, <$00A6, <$009D, <$0094, <$008B, <$0084, <$007C, <$0075, <$006E, <$0068
0F0AE 62 5D 57 52 4E 49 45 41..     .db <$0062, <$005D, <$0057, <$0052, <$004E, <$0049, <$0045, <$0041, <$003E, <$003A, <$0037, <$0034
0F0BA 31 2E 2B 29 26 24 22 20..     .db <$0031, <$002E, <$002B, <$0029, <$0026, <$0024, <$0022, <$0020, <$001E, <$001D, <$001B, <$0019
0F0C6 18 16 15 14 13 12 11 10..     .db <$0018, <$0016, <$0015, <$0014, <$0013, <$0012, <$0011, <$0010, <$000F, <$000E, <$000D, <$000C
0F0D2                           PAL_PTNperiodTable_hi:
0F0D2 07 06 06                  	.db >$0760, >$06F6, >$0692
0F0D5 06 05 05 05 04 04 04 04..     .db >$0634, >$05DB, >$0586, >$0537, >$04EC, >$04A5, >$0462, >$0423, >$03E8, >$03B0, >$037B, >$0349
0F0E1 03 02 02 02 02 02 02 02..     .db >$0319, >$02ED, >$02C3, >$029B, >$0275, >$0252, >$0231, >$0211, >$01F3, >$01D7, >$01BD, >$01A4
0F0ED 01 01 01 01 01 01 01 01..     .db >$018C, >$0176, >$0161, >$014D, >$013A, >$0129, >$0118, >$0108, >$00F9
0F0F6                           
0F0F6                           sabre_registerInitTable:
0F0F6 30 08 00 00               	.db $30,$08,$00,$00
0F0FA 30 08 00 00               	.db $30,$08,$00,$00
0F0FE 80 00 00 00               	.db $80,$00,$00,$00
0F102 30 00 00 00               	.db $30,$00,$00,$00
0F106 00 00 00 00               	.db $00,$00,$00,$00
0F10A                           	
0F10A                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F10A                           
0F10A                           sabre_initAPU:
0F10A A2 13                     	LDX #19
0F10C                           	-
0F10C BD F6 F0                  	LDA sabre_registerInitTable,x
0F10F 9D 00 40                  	STA $4000,x 		;; Initialize APU and shadow APU registers
0F112 9D 00 01                  	STA apuShadow4000,x
0F115 CA                        	DEX  
0F116 10 F4                     	BPL -
0F118 A9 0F                     	LDA #%00001111		;; Enable Pulse 1, Pulse 2, Triangle, Noise
0F11A 8D 15 40                  	STA $4015
0F11D A9 00                     	LDA #0				;; Won't be writing to $400F again
0F11F 8D 0F 40                  	STA $400F			;; But must be written once after Noise channel is enabled
0F122 8D 01 01                  	STA apuSFX4000
0F125 8D 03 01                  	STA apuSFX4004
0F128 8D 05 01                  	STA apuSFX4008
0F12B 8D 07 01                  	STA apuSFX400C
0F12E 8D 17 01                  	STA apuLast4003
0F131 8D 18 01                  	STA apuLast4007
0F134 8D 72 01                  	STA currentTrackPRGbank		;; Set track PRG bank to 0 [Default]
0F137 A2 08                     	LDX #8
0F139                           	-
0F139 95 1E                     	STA channel_trackAddr,x 	;; Initialize track addresses to 0
0F13B CA                        	DEX 
0F13C 10 FB                     	BPL -
0F13E 8A                        	TXA
0F13F 8D 19 01                  	STA sabrePauseStatus		;; Initialize pause status to unpaused
0F142 A2 08                     	LDX #8
0F144                           	-
0F144 9D 1A 01                  	STA channelMuteStatus,x		;; Initialized all channels to unmuted
0F147 CA                        	DEX 
0F148 10 FA                     	BPL -
0F14A 60                        	RTS
0F14B                           
0F14B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F14B                           
0F14B                           sabre_playTrack:
0F14B 8A                        	TXA 
0F14C 48                        	PHA
0F14D 98                        	TYA 
0F14E 48                        	PHA
0F14F                           	;; Get all info from track header
0F14F AC 70 01                  	LDY currentTrack
0F152 B9 02 90                  	LDA trackHeaderTable_lo,y 
0F155 85 13                     	STA pointer16 
0F157 B9 04 90                  	LDA trackHeaderTable_hi,y
0F15A 85 14                     	STA pointer16+1
0F15C B9 06 90                  	LDA trackTable_PRGbank,y 
0F15F 8D 72 01                  	STA currentTrackPRGbank
0F162 A0 00                     	LDY #0
0F164 8C 6E 01                  	STY trackCurrentPattern
0F167 A9 FF                     	LDA #$FF 
0F169 38                        	SEC
0F16A 24 1D                     	BIT soundRegion		;; Subtract 1 from track speed if PAL or Dendy
0F16C F0 01                     	BEQ +
0F16E 18                        		CLC 
0F16F                           	+
0F16F 71 13                     	ADC (pointer16),y 
0F171 8D 6A 01                  	STA trackSpeed  
0F174 8C 6C 01                  	STY trackFrameTimer 
0F177 8C 35 01                  	STY channelInstrument		;; Set channel instruments to 0 / silent
0F17A 8C 37 01                  	STY channelInstrument+2
0F17D 8C 39 01                  	STY channelInstrument+4
0F180 8C 3B 01                  	STY channelInstrument+6
0F183 8C 3D 01                  	STY channelInstrument+8
0F186 C8                        	INY
0F187 8C 2C 01                  	STY channelNoteCountdown	;; Set 1 to channel countdown timers	
0F18A 8C 2E 01                  	STY channelNoteCountdown+2	;; So starting note will occur on next tick
0F18D 8C 30 01                  	STY channelNoteCountdown+4
0F190 8C 32 01                  	STY channelNoteCountdown+6
0F193 8C 34 01                  	STY channelNoteCountdown+8
0F196 B1 13                     	LDA (pointer16),y 
0F198 8D 6F 01                  	STA trackMaxPatterns
0F19B C8                        	INY 
0F19C A2 00                     	LDX #0
0F19E                           setChannelTrackAddresses:
0F19E B1 13                     	LDA (pointer16),y 
0F1A0 95 1E                     	STA channel_trackAddr,x		;; lo byte
0F1A2 C8                        	INY 
0F1A3 B1 13                     	LDA (pointer16),y 
0F1A5 95 1F                     	STA channel_trackAddr+1,x 	;; hi byte
0F1A7 C8                        	INY
0F1A8 8A                        	TXA 
0F1A9 CB FC                     	AXS #252
0F1AB C0 0C                     	CPY #12
0F1AD 90 EF                     	BCC setChannelTrackAddresses
0F1AF A0 00                     	LDY #0
0F1B1 20 2E F2                  	JSR setChannelPatternAddresses
0F1B4                           	;; Silence all channels
0F1B4 A9 00                     	LDA #0
0F1B6 8D 00 01                  	STA apuShadow4000
0F1B9 8D 02 01                  	STA apuShadow4004
0F1BC 8D 06 01                  	STA apuShadow400C
0F1BF 8D 11 40                  	STA $4011
0F1C2 A9 80                     	LDA #$80
0F1C4 8D 04 01                  	STA apuShadow4008
0F1C7                           	;; Initialize DMC
0F1C7 A9 01                     	LDA #1
0F1C9 8D 16 01                  	STA dmcStatus
0F1CC A9 0F                     	LDA #%00001111
0F1CE 8D 15 40                  	STA $4015
0F1D1 68                        	PLA 
0F1D2 A8                        	TAY
0F1D3 68                        	PLA 
0F1D4 AA                        	TAX
0F1D5 60                        	RTS
0F1D6                           
0F1D6                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F1D6                           
0F1D6                           sabre_playSFX:
0F1D6 8A                        	TXA 
0F1D7 48                        	PHA
0F1D8 98                        	TYA 
0F1D9 48                        	PHA 
0F1DA                           	;; Get all info from track header
0F1DA AC 71 01                  	LDY currentSFX
0F1DD B9 08 90                  	LDA sfxHeaderTable_lo,y 
0F1E0 85 13                     	STA pointer16 
0F1E2 B9 0A 90                  	LDA sfxHeaderTable_hi,y
0F1E5 85 14                     	STA pointer16+1
0F1E7 A0 00                     	LDY #0
0F1E9 A9 FF                     	LDA #$FF 
0F1EB 38                        	SEC
0F1EC 24 1D                     	BIT soundRegion		;; Subtract 1 from track speed if PAL or Dendy
0F1EE F0 01                     	BEQ +
0F1F0 18                        		CLC 
0F1F1                           	+
0F1F1 71 13                     	ADC (pointer16),y 
0F1F3 8D 6B 01                  	STA SFXspeed
0F1F6 8C 6D 01                  	STY SFXframeTimer
0F1F9 8C 36 01                  	STY channelInstrument+1		;; Set channel instruments to 0 / silent
0F1FC 8C 38 01                  	STY channelInstrument+3
0F1FF 8C 3A 01                  	STY channelInstrument+5
0F202 8C 3C 01                  	STY channelInstrument+7
0F205 C8                        	INY 
0F206 8C 2D 01                  	STY channelNoteCountdown+1	;; Set 1 to channel countdown timers
0F209 8C 2F 01                  	STY channelNoteCountdown+3	;; So starting note will occur on next tick
0F20C 8C 31 01                  	STY channelNoteCountdown+5
0F20F 8C 33 01                  	STY channelNoteCountdown+7
0F212 A2 02                     	LDX #2
0F214                           setChannelSFXaddresses:
0F214 B1 13                     	LDA (pointer16),y 
0F216 95 1E                     	STA channel_trackAddr,x		;; lo byte
0F218 95 30                     	STA channel_patternOffsetAddr,x
0F21A C8                        	INY 
0F21B B1 13                     	LDA (pointer16),y 
0F21D 95 1F                     	STA channel_trackAddr+1,x 	;; hi byte
0F21F 95 31                     	STA channel_patternOffsetAddr+1,x 
0F221 C8                        	INY
0F222 8A                        	TXA 
0F223 CB FC                     	AXS #252
0F225 C0 09                     	CPY #9
0F227 90 EB                     	BCC setChannelSFXaddresses
0F229 68                        	PLA 
0F22A A8                        	TAY 
0F22B 68                        	PLA 
0F22C AA                        	TAX
0F22D 60                        	RTS
0F22E                           
0F22E                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F22E                           
0F22E                           setChannelPatternAddresses:
0F22E                           	;; Pulse 1 starting pattern - lo
0F22E B1 1E                     	LDA (channel_trackAddr),y 	
0F230 85 30                     	STA channel_patternOffsetAddr
0F232                           	;; Pulse 2 starting pattern - lo
0F232 B1 22                     	LDA (channel_trackAddr+4),y 
0F234 85 34                     	STA channel_patternOffsetAddr+4
0F236                           	;; Triangle starting pattern - lo
0F236 B1 26                     	LDA (channel_trackAddr+8),y 
0F238 85 38                     	STA channel_patternOffsetAddr+8
0F23A                           	;; Noise starting pattern - lo
0F23A B1 2A                     	LDA (channel_trackAddr+12),y 
0F23C 85 3C                     	STA channel_patternOffsetAddr+12
0F23E                           	;; DMC starting pattern  - lo
0F23E B1 2E                     	LDA (channel_trackAddr+16),y 
0F240 85 40                     	STA channel_patternOffsetAddr+16
0F242 C8                        	INY 
0F243                           	;; Pulse 1 starting pattern - hi
0F243 B1 1E                     	LDA (channel_trackAddr),y 
0F245 85 31                     	STA channel_patternOffsetAddr+1
0F247                           	;; Pulse 2 starting pattern - hi
0F247 B1 22                     	LDA (channel_trackAddr+4),y 
0F249 85 35                     	STA channel_patternOffsetAddr+5
0F24B                           	;; Triangle starting pattern - hi
0F24B B1 26                     	LDA (channel_trackAddr+8),y 
0F24D 85 39                     	STA channel_patternOffsetAddr+9
0F24F                           	;; Noise starting pattern - hi
0F24F B1 2A                     	LDA (channel_trackAddr+12),y 
0F251 85 3D                     	STA channel_patternOffsetAddr+13
0F253                           	;; DMC starting pattern  - hi
0F253 B1 2E                     	LDA (channel_trackAddr+16),y 
0F255 85 41                     	STA channel_patternOffsetAddr+17
0F257 60                        	RTS
0F258                           
0F258                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F258                           
0F258                           ;;;; CHANNEL SETUP
0F258                           ;; 0 - Pulse 1
0F258                           ;; 1 - Pulse 1 SFX
0F258                           ;; 2 - Pulse 2
0F258                           ;; 3 - Pulse 2 SFX 
0F258                           ;; 4 - Triangle 
0F258                           ;; 5 - Triangle SFX 
0F258                           ;; 6 - Noise 
0F258                           ;; 7 - Noise SFX
0F258                           ;; 8 - DMC
0F258                           
0F258                           sabre_soundUpdate:
0F258 8A                        	TXA 
0F259 48                        	PHA 
0F25A 98                        	TYA 
0F25B 48                        	PHA
0F25C A2 00                     	LDX #0		;; X contains channel index << 1
0F25E A0 00                     	LDY #0		;; Y contains channel index 
0F260                           sabre_processChannelRow:
0F260                           	;; Cheack if this channel is active
0F260 B5 1F                     	LDA channel_trackAddr+1,x
0F262 2D 19 01                  	AND sabrePauseStatus
0F265 D0 03                     	BNE +
0F267 4C FD F3                  		JMP iterateNextSoundChannel
0F26A                           	+
0F26A                           	;; Check if we need to advance to the next FT row [Ticks = 0]
0F26A AD 6C 01                  	LDA trackFrameTimer
0F26D                           SFXframeTimerReturnCheck:
0F26D D0 78                     	BNE sabre_ProcessChannelEnvelopes
0F26F                           	;; Check if there's something to process this row 
0F26F DB 2C 01                  	DCP channelNoteCountdown,y
0F272 D0 73                     	BNE sabre_ProcessChannelEnvelopes
0F274                           	
0F274                           getNextPatternByte:
0F274 A1 30                     	LDA (channel_patternOffsetAddr,x)
0F276 10 13                     	BPL skipInstrumentChange
0F278                           		;; Set new instrument 
0F278 85 07                     		STA sabreTemp
0F27A 29 3F                     		AND #%00111111
0F27C 99 35 01                  		STA channelInstrument,y 
0F27F 24 07                     		BIT sabreTemp
0F281 50 37                     		BVC setNoteDurationToCountdown
0F283                           		;; Increment pattern offset address 
0F283 F6 30                     		INC channel_patternOffsetAddr,x 
0F285 D0 ED                     		BNE getNextPatternByte
0F287 F6 31                     			INC channel_patternOffsetAddr+1,x
0F289 70 E9                     		BVS getNextPatternByte 
0F28B                           skipInstrumentChange:
0F28B                           	;; Check if current byte is a control instruction
0F28B C9 57                     	CMP #NOTE_CEILING 
0F28D 90 28                     	BCC skipControlOpcode
0F28F 84 07                     		STY sabreTemp 
0F291                           		;; Increment pattern offset address 
0F291 F6 30                     		INC channel_patternOffsetAddr,x 
0F293 D0 02                     		BNE +
0F295 F6 31                     			INC channel_patternOffsetAddr+1,x
0F297                           		+
0F297 C9 61                     		CMP #NOTE_LENGTHS_START
0F299 90 0E                     		BCC +
0F29B E9 61                     			SBC #NOTE_LENGTHS_START
0F29D A8                        			TAY 
0F29E B9 63 F5                  			LDA sabre_noteLengthTable,y
0F2A1 A4 07                     			LDY sabreTemp
0F2A3 99 23 01                  			STA channelNoteDuration,y
0F2A6 4C 74 F2                  			JMP getNextPatternByte
0F2A9                           		+
0F2A9                           		;; Execute corresponding control opcode 
0F2A9 A8                        		TAY 
0F2AA B9 FC F4                  		LDA sabre_noteControlOpcodeTable_lo-NOTE_CEILING,y
0F2AD 85 13                     		STA pointer16 
0F2AF B9 04 F5                  		LDA sabre_noteControlOpcodeTable_hi-NOTE_CEILING,y 
0F2B2 85 14                     		STA pointer16+1 
0F2B4 6C 13 00                  		JMP (pointer16) 
0F2B7                           		;; Will jump to getNextPatternByte - expects redundant note length byte 
0F2B7                           skipControlOpcode:
0F2B7 99 58 01                  	STA channelBaseNote,y 
0F2BA                           setNoteDurationToCountdown:
0F2BA B9 23 01                  	LDA channelNoteDuration,y 
0F2BD 99 2C 01                  	STA channelNoteCountdown,y 
0F2C0                           	;; Increment pattern offset address 
0F2C0 F6 30                     	INC channel_patternOffsetAddr,x 
0F2C2 D0 02                     	BNE endProcessChannelRow
0F2C4 F6 31                     		INC channel_patternOffsetAddr+1,x
0F2C6                           endProcessChannelRow:
0F2C6 C0 08                     	CPY #8 
0F2C8 90 08                     	BCC +
0F2CA                           		;; Reset DMC state on new note
0F2CA A9 00                     		LDA #0
0F2CC 8D 16 01                  		STA dmcStatus
0F2CF 4C 16 F4                  		JMP sabre_DMChandler
0F2D2                           	+
0F2D2 A9 00                     	LDA #0
0F2D4 99 3E 01                  	STA channelVolEnvelopeStep,y
0F2D7 99 46 01                  	STA channelArpEnvelopeStep,y
0F2DA 99 4E 01                  	STA channelPitchEnvelopeStep,y
0F2DD 99 61 01                  	STA channelLastArpNote,y
0F2E0 C0 02                     	CPY #2
0F2E2 B0 03                     	BCS sabre_ProcessChannelEnvelopes
0F2E4 99 54 01                  	STA channelDutyEnvelopeStep,y
0F2E7                           	
0F2E7                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F2E7                           
0F2E7                           sabre_ProcessChannelEnvelopes:
0F2E7 C0 08                     	CPY #8
0F2E9 90 03                     	BCC +
0F2EB                           		;; Skip envelope handling for DMC
0F2EB 4C 16 F4                  		JMP sabre_DMChandler
0F2EE                           	+
0F2EE 86 07                     	STX sabreTemp 
0F2F0 98                        	TYA 
0F2F1 AA                        	TAX
0F2F2                           	;; X now contains channel index 
0F2F2                           	;;;; Get instrument header from instrument table
0F2F2 BD 35 01                  	LDA channelInstrument,x 
0F2F5 0A                        	ASL 
0F2F6 A8                        	TAY
0F2F7 B9 68 90                  	LDA instrumentHeaderTable,y
0F2FA 85 08                     	STA instrumentAddr
0F2FC C8                        	INY
0F2FD B9 68 90                  	LDA instrumentHeaderTable,y
0F300 85 09                     	STA instrumentAddr+1 
0F302                           	
0F302                           	;;;; Update volume envelope
0F302 A0 00                     	LDY #0
0F304 B1 08                     	LDA (instrumentAddr),y 
0F306 85 13                     	STA envelopeAddr
0F308 C8                        	INY 
0F309 B1 08                     	LDA (instrumentAddr),y 
0F30B 85 14                     	STA envelopeAddr+1
0F30D                           	;; Get value offset into envelope and update shadow APU registers
0F30D BC 3E 01                  	LDY channelVolEnvelopeStep,x 
0F310 FE 3E 01                  	INC channelVolEnvelopeStep,x 
0F313 B1 13                     	LDA (envelopeAddr),y 
0F315 C9 80                     	CMP #ENV_LOOP
0F317 D0 09                     	BNE +skipLoopPoint
0F319                           		;; Read next byte to get step to jump back to 
0F319 C8                        		INY 
0F31A B1 13                     		LDA (envelopeAddr),y 
0F31C 9D 3E 01                  		STA channelVolEnvelopeStep,x 
0F31F A8                        		TAY 
0F320                           		;; Read next data byte 
0F320 B1 13                     		LDA (envelopeAddr),y 
0F322                           +skipLoopPoint:
0F322 3D 1A 01                  	AND channelMuteStatus,x
0F325 9D 00 01                  	STA apuShadow4000X,x
0F328                           	
0F328                           	;;;; Update arpeggio enveleope 
0F328 A0 02                     	LDY #2
0F32A B1 08                     	LDA (instrumentAddr),y 
0F32C 85 13                     	STA envelopeAddr
0F32E C8                        	INY 
0F32F B1 08                     	LDA (instrumentAddr),y 
0F331 85 14                     	STA envelopeAddr+1
0F333                           	;; Get value offset into envelope and update shadow APU registers
0F333 BC 46 01                  	LDY channelArpEnvelopeStep,x 
0F336 FE 46 01                  	INC channelArpEnvelopeStep,x 
0F339 B1 13                     	LDA (envelopeAddr),y 
0F33B C9 80                     	CMP #ENV_LOOP 
0F33D D0 09                     	BNE +skipLoopPoint 
0F33F                           		;; Read next byte to get step to jump back to 
0F33F C8                        		INY
0F340 B1 13                     		LDA (envelopeAddr),y 
0F342 9D 46 01                  		STA channelArpEnvelopeStep,x 
0F345 A8                        		TAY 
0F346                           		;; Read next data byte 
0F346 B1 13                     		LDA (envelopeAddr),y
0F348                           +skipLoopPoint:
0F348                           	;; Add relative offset to base note 
0F348 18                        	CLC 
0F349 7D 58 01                  	ADC channelBaseNote,x
0F34C DD 61 01                  	CMP channelLastArpNote,x 
0F34F F0 35                     	BEQ +endArpEnvelope
0F351                           	;; Update new note period
0F351 9D 61 01                  	STA channelLastArpNote,x
0F354 E0 06                     	CPX #6
0F356 90 06                     	BCC +
0F358                           		;; Use period index directly for noise channel
0F358 9D 08 01                  		STA apuShadow4002X,x 
0F35B 4C F9 F3                  		JMP +endDutyEnvelope	;; Don't update pitch or duty envelopes
0F35E                           	+
0F35E A8                        	TAY 
0F35F A5 1D                     	LDA soundRegion
0F361 C9 01                     	CMP #1
0F363 F0 0F                     	BEQ +PAL
0F365                           		;; Use NTSC / DENDY period table
0F365 B9 00 F0                  		LDA NTSC_PTNperiodTable_lo,y 
0F368 9D 08 01                  		STA apuShadow4002X,x
0F36B C0 24                     		CPY #36 
0F36D B0 12                     		BCS +zeroHiByte
0F36F B9 57 F0                  		LDA NTSC_PTNperiodTable_hi,y 
0F372 90 0F                     		BCC +store4003X
0F374                           	+PAL:
0F374                           		;; Use PAL period table
0F374 B9 7B F0                  		LDA PAL_PTNperiodTable_lo,y 
0F377 9D 08 01                  		STA apuShadow4002X,x 
0F37A B9 D2 F0                  		LDA PAL_PTNperiodTable_hi,y 
0F37D C0 24                     		CPY #36
0F37F 90 02                     		BCC +store4003X
0F381                           	+zeroHiByte:
0F381 A9 00                     		LDA #0
0F383                           	+store4003X:
0F383 9D 10 01                  		STA apuShadow4003X,x
0F386                           +endArpEnvelope:
0F386                           
0F386                           	;;;; Update pitch envelope 
0F386 A0 04                     	LDY #4
0F388 B1 08                     	LDA (instrumentAddr),y 
0F38A 85 13                     	STA envelopeAddr
0F38C C8                        	INY 
0F38D B1 08                     	LDA (instrumentAddr),y 
0F38F 85 14                     	STA envelopeAddr+1
0F391                           	;; Get value offset into envelope and update shadow APU registers
0F391 BC 4E 01                  	LDY channelPitchEnvelopeStep,x 
0F394 FE 4E 01                  	INC channelPitchEnvelopeStep,x
0F397 B1 13                     	LDA (envelopeAddr),y 
0F399 C9 80                     	CMP #ENV_LOOP 
0F39B D0 07                     	BNE +skipLoopPoint 
0F39D                           		;; Read next byte to get step to jump back to 
0F39D C8                        		INY
0F39E B1 13                     		LDA (envelopeAddr),y 
0F3A0 9D 4E 01                  		STA channelPitchEnvelopeStep,x 
0F3A3 A8                        		TAY 
0F3A4                           		;; Read next data byte 
0F3A4                           +skipLoopPoint:
0F3A4 B1 13                     	LDA (envelopeAddr),y
0F3A6 18                        	CLC 
0F3A7 10 13                     	BPL +isAddition
0F3A9                           		;; Is subtraction 
0F3A9 7D 08 01                  		ADC apuShadow4002X,x 
0F3AC 9D 08 01                  		STA apuShadow4002X,x 
0F3AF B0 1D                     		BCS +endPitchEnvelope
0F3B1 BD 10 01                  			LDA apuShadow4003X,x
0F3B4 F0 18                     			BEQ +endPitchEnvelope
0F3B6 DE 10 01                  			DEC apuShadow4003X,x
0F3B9 4C CE F3                  			JMP +endPitchEnvelope
0F3BC                           	+isAddition:
0F3BC                           		;; Is addition 
0F3BC 7D 08 01                  		ADC apuShadow4002X,x
0F3BF 9D 08 01                  		STA apuShadow4002X,x
0F3C2 90 0A                     		BCC +endPitchEnvelope
0F3C4 BD 10 01                  			LDA apuShadow4003X,x 
0F3C7 C9 08                     			CMP #8
0F3C9 B0 03                     			BCS +endPitchEnvelope
0F3CB FE 10 01                  			INC apuShadow4003X,x
0F3CE                           +endPitchEnvelope: 
0F3CE                           
0F3CE                           	;;;; Update duty envelope [Pulse 1 and 2]
0F3CE E0 04                     	CPX #4
0F3D0 B0 27                     	BCS +endDutyEnvelope
0F3D2 A0 06                     		LDY #6
0F3D4 B1 08                     		LDA (instrumentAddr),y 
0F3D6 85 13                     		STA envelopeAddr
0F3D8 C8                        		INY 
0F3D9 B1 08                     		LDA (instrumentAddr),y 
0F3DB 85 14                     		STA envelopeAddr+1
0F3DD                           		;; Get value offset into envelope and update shadow APU register
0F3DD BC 54 01                  		LDY channelDutyEnvelopeStep,x 
0F3E0 FE 54 01                  		INC channelDutyEnvelopeStep,x 
0F3E3 B1 13                     		LDA (envelopeAddr),y 
0F3E5 C9 80                     		CMP #ENV_LOOP 
0F3E7 D0 09                     		BNE +skipLoopPoint 
0F3E9                           			;; Read next byte to get step to jump back to 
0F3E9 C8                        			INY
0F3EA B1 13                     			LDA (envelopeAddr),y 
0F3EC 9D 54 01                  			STA channelDutyEnvelopeStep,x 
0F3EF A8                        			TAY 
0F3F0                           			;; Read next data byte 
0F3F0 B1 13                     			LDA (envelopeAddr),y
0F3F2                           	+skipLoopPoint: 
0F3F2 0A                        		ASL 
0F3F3 1D 00 01                  		ORA apuShadow4000X,x 
0F3F6 9D 00 01                  		STA apuShadow4000X,x
0F3F9                           +endDutyEnvelope:	
0F3F9 A7 07                     	LAX sabreTemp 
0F3FB 4A                        	LSR 
0F3FC A8                        	TAY 
0F3FD                           	
0F3FD                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F3FD                           
0F3FD                           iterateNextSoundChannel:
0F3FD E8                        	INX 
0F3FE E8                        	INX 
0F3FF C8                        	INY
0F400 C0 09                     	CPY #9
0F402 B0 12                     	BCS sabre_DMChandler
0F404 98                        	TYA 
0F405 29 01                     	AND #%00000001
0F407 D0 03                     	BNE sabre_processChannelSFXrow
0F409 4C 60 F2                  	JMP sabre_processChannelRow
0F40C                           	
0F40C                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F40C                           	
0F40C                           sabre_processChannelSFXrow:
0F40C                           	;; Cheack if this channel is active
0F40C B5 1F                     	LDA channel_trackAddr+1,x
0F40E F0 ED                     	BEQ iterateNextSoundChannel
0F410                           	;; Check if we need to advance to the next FT row [Ticks = 0]
0F410 AD 6D 01                  	LDA SFXframeTimer
0F413 4C 6D F2                  	JMP SFXframeTimerReturnCheck
0F416                           
0F416                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F416                           
0F416                           sabre_DMChandler:
0F416                           	;; Cheack if DMC is active
0F416 A5 2F                     	LDA channel_trackAddr+17
0F418 2D 22 01                  	AND channelMuteStatus+8
0F41B F0 2A                     	BEQ sabre_updateAPUregisters 
0F41D                           	;; Check DMC status
0F41D AD 16 01                  	LDA dmcStatus
0F420 D0 25                     	BNE sabre_updateAPUregisters
0F422                           	;; Start new DPCM sample
0F422 EE 16 01                  	INC dmcStatus
0F425 AE 60 01                  	LDX channelBaseNote+8
0F428 BD D8 90                  	LDA dpcm_noteToSampleRateAndFlags,x 
0F42B 8D 10 40                  	STA $4010
0F42E BC 82 90                  	LDY dpcm_noteToSampleTable,x 
0F431 B9 7E 90                  	LDA dpcm_sampleAddressTable,y 
0F434 8D 12 40                  	STA $4012
0F437 BD 2E 91                  	LDA dpcm_noteToSampleLength,x 
0F43A 8D 13 40                  	STA $4013
0F43D                           	;; Restart DMC
0F43D A9 0F                         LDA #%00001111
0F43F 8D 15 40                      STA $4015
0F442 A9 1F                         LDA #%00011111
0F444 8D 15 40                      STA $4015
0F447                           
0F447                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F447                           	
0F447                           sabre_updateAPUregisters:
0F447                           	;; Pulse 1 registers
0F447 AD 01 01                  	LDA apuSFX4000
0F44A F0 11                     	BEQ +noSFX
0F44C                           		;; Use SFX
0F44C 09 30                     		ORA #%00110000
0F44E 8D 00 40                  		STA $4000
0F451 AD 09 01                  		LDA apuSFX4002
0F454 8D 02 40                  		STA $4002
0F457 AD 11 01                  		LDA apuSFX4003
0F45A 4C 6E F4                  		JMP +checkHiTimer
0F45D                           +noSFX:
0F45D AD 00 01                  	LDA apuShadow4000
0F460 09 30                     	ORA #%00110000
0F462 8D 00 40                  	STA $4000
0F465 AD 08 01                  	LDA apuShadow4002
0F468 8D 02 40                  	STA $4002
0F46B AD 10 01                  	LDA apuShadow4003
0F46E                           +checkHiTimer:
0F46E CD 17 01                  	CMP apuLast4003
0F471 F0 06                     	BEQ +
0F473 8D 03 40                  		STA $4003
0F476 8D 17 01                  		STA apuLast4003
0F479                           	+
0F479                           	;; Pulse 2 registers 
0F479 AD 03 01                  	LDA apuSFX4004
0F47C F0 11                     	BEQ +noSFX
0F47E                           		;; Use SFX
0F47E 09 30                     		ORA #%00110000
0F480 8D 04 40                  		STA $4004
0F483 AD 0B 01                  		LDA apuSFX4006
0F486 8D 06 40                  		STA $4006
0F489 AD 13 01                  		LDA apuSFX4007
0F48C 4C A0 F4                  		JMP +checkHiTimer
0F48F                           +noSFX:
0F48F AD 02 01                  	LDA apuShadow4004
0F492 09 30                     	ORA #%00110000
0F494 8D 04 40                  	STA $4004
0F497 AD 0A 01                  	LDA apuShadow4006
0F49A 8D 06 40                  	STA $4006
0F49D AD 12 01                  	LDA apuShadow4007
0F4A0                           +checkHiTimer:
0F4A0 CD 18 01                  	CMP apuLast4007
0F4A3 F0 06                     	BEQ +
0F4A5 8D 07 40                  		STA $4007
0F4A8 8D 18 01                  		STA apuLast4007
0F4AB                           	+
0F4AB                           	;; Triangle registers 
0F4AB AD 05 01                  	LDA apuSFX4008
0F4AE F0 13                     	BEQ +noSFX
0F4B0                           		;; Use SFX
0F4B0 0B 0F                     		ANC #%00001111
0F4B2 09 80                     		ORA #%10000000
0F4B4 8D 08 40                  		STA $4008
0F4B7 AD 0D 01                  		LDA apuSFX400A
0F4BA 8D 0A 40                  		STA $400A
0F4BD AD 15 01                  		LDA apuSFX400B
0F4C0 4C D6 F4                  		JMP +
0F4C3                           +noSFX:
0F4C3 AD 04 01                  	LDA apuShadow4008
0F4C6 0B 0F                     	ANC #%00001111
0F4C8 09 80                     	ORA #%10000000
0F4CA 8D 08 40                  	STA $4008
0F4CD AD 0C 01                  	LDA apuShadow400A
0F4D0 8D 0A 40                  	STA $400A 
0F4D3 AD 14 01                  	LDA apuShadow400B
0F4D6                           	+
0F4D6 8D 0B 40                  	STA $400B 
0F4D9                           	;; Noise registers 
0F4D9 AD 07 01                  	LDA apuSFX400C
0F4DC F0 0B                     	BEQ +noSFX
0F4DE                           		;; Use SFX
0F4DE 09 30                     		ORA #%00110000
0F4E0 8D 0C 40                  		STA $400C 
0F4E3 AD 0F 01                  		LDA apuSFX400E
0F4E6 4C F4 F4                  		JMP +
0F4E9                           +noSFX:
0F4E9 AD 06 01                  	LDA apuShadow400C 
0F4EC 09 30                     	ORA #%00110000
0F4EE 8D 0C 40                  	STA $400C 
0F4F1 AD 0E 01                  	LDA apuShadow400E
0F4F4                           	+
0F4F4 8D 0E 40                  	STA $400E 
0F4F7                           
0F4F7                           	;; Update track frame timer
0F4F7 AD 6C 01                  	LDA trackFrameTimer
0F4FA D0 05                     	BNE +
0F4FC AD 6A 01                  		LDA trackSpeed 
0F4FF F0 05                     		BEQ ++	;; Exception for PAL speed "0"
0F501                           	+
0F501 E9 00                     	SBC #0
0F503 8D 6C 01                  	STA trackFrameTimer
0F506                           	++
0F506                           	;; Update SFX frame timer
0F506 AD 6D 01                  	LDA SFXframeTimer
0F509 D0 05                     	BNE +
0F50B AD 6B 01                  		LDA SFXspeed
0F50E F0 06                     		BEQ ++	;; Exception for PAL speed "0"
0F510                           	+
0F510 18                        	CLC 
0F511 E9 00                     	SBC #0
0F513 8D 6D 01                  	STA SFXframeTimer
0F516                           	++
0F516 68                        	PLA 
0F517 A8                        	TAY 
0F518 68                        	PLA 
0F519 AA                        	TAX
0F51A 60                        	RTS
0F51B                           
0F51B                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F51B                           
0F51B                           sabre_stopTrack:
0F51B                           	;;;; Stop sing playback of all channels
0F51B A9 00                     	LDA #0
0F51D A0 11                     	LDY #17
0F51F                           	-
0F51F 99 1E 00                  	STA channel_trackAddr,y 
0F522 88                        	DEY 
0F523 10 FA                     	BPL -
0F525                           	;; Clear volume registers
0F525 8D 00 01                  	STA apuShadow4000
0F528 8D 02 01                  	STA apuShadow4004
0F52B 8D 04 01                  	STA apuShadow4008
0F52E 8D 06 01                  	STA apuShadow400C
0F531                           	;; Stop DMC 
0F531 A9 0F                     	LDA #%00001111
0F533 8D 15 40                  	STA $4015
0F536 60                        	RTS
0F537                           
0F537                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F537                           
0F537                           sabre_pauseTrack:
0F537                           	;;;; Pause song playback of all channels - ready to resume playback
0F537 AD 19 01                  	LDA sabrePauseStatus
0F53A 49 FF                     	EOR #$FF 
0F53C 8D 19 01                  	STA sabrePauseStatus
0F53F D0 11                     	BNE +
0F541                           		;; Paused - clear volume registers
0F541 8D 00 01                  		STA apuShadow4000
0F544 8D 02 01                  		STA apuShadow4004
0F547 8D 04 01                  		STA apuShadow4008
0F54A 8D 06 01                  		STA apuShadow400C
0F54D                           		;; Stop DMC 
0F54D A9 0F                     		LDA #%00001111
0F54F 8D 15 40                  		STA $4015
0F552                           	+
0F552 60                        	RTS
0F553                           
0F553                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F553                           
0F553                           sabre_noteControlOpcodeTable_lo:
0F553 82 9B AA B0 C0 D8 E2 ED   	.db <op_D00, <op_BXX, <op_C00, <op_NLC, <op_FXX, <op_ZXX, <op_NUL, <op_END_SFX
0F55B                           sabre_noteControlOpcodeTable_hi:
0F55B F5 F5 F5 F5 F5 F5 F5 F5   	.db >op_D00, >op_BXX, >op_C00, >op_NLC, >op_FXX, >op_ZXX, >op_NUL, >op_END_SFX
0F563                           
0F563                           sabre_noteLengthTable:
0F563 01 02 03 04 05 06 07 08.. 	.db 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
0F573 12 14 16 18 1A 1C 1E 20   	.db 18,20,22,24,26,28,30,32
0F57B 24 28 30                  	.db 36,40,48
0F57E 40 62 80                  	.db 64,98,128
0F581 00                        	.db 0
0F582                           
0F582                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0F582                           
0F582                           op_D00:
0F582                           	;; DXX - Advance to beginning of next pattern in sequence
0F582 AD 6E 01                  	LDA trackCurrentPattern
0F585 69 01                     	ADC #1		;; Carry guaranteed to be cleared 
0F587 CD 6F 01                  	CMP trackMaxPatterns
0F58A 90 02                     	BCC +
0F58C A9 00                     		LDA #0
0F58E                           	+
0F58E 8D 6E 01                  	STA trackCurrentPattern
0F591 0A                        	ASL 
0F592 A8                        	TAY 
0F593 20 2E F2                  	JSR setChannelPatternAddresses
0F596 A4 07                     	LDY sabreTemp 
0F598 4C 74 F2                  	JMP getNextPatternByte
0F59B                           
0F59B                           op_BXX:
0F59B                           	;; BXX - Jump to beginning of specified pattern of next byte
0F59B A1 30                     	LDA (channel_patternOffsetAddr,x)
0F59D 8D 6E 01                  	STA trackCurrentPattern
0F5A0 0A                        	ASL
0F5A1 A8                        	TAY 
0F5A2 20 2E F2                  	JSR setChannelPatternAddresses
0F5A5 A4 07                     	LDY sabreTemp 
0F5A7 4C 74 F2                  	JMP getNextPatternByte
0F5AA                           
0F5AA                           op_C00:
0F5AA                           	;; CXX - Terminate track
0F5AA 20 1B F5                  	JSR sabre_stopTrack
0F5AD 4C 47 F4                  	JMP sabre_updateAPUregisters
0F5B0                           
0F5B0                           op_NLC:
0F5B0                           	;; NLC - Note Length Custom - Set custom note length of next byte
0F5B0 A1 30                     	LDA (channel_patternOffsetAddr,x)
0F5B2 A4 07                     	LDY sabreTemp 
0F5B4 99 23 01                  	STA channelNoteDuration,y 
0F5B7 F6 30                     	INC channel_patternOffsetAddr,x 
0F5B9 D0 02                     	BNE +
0F5BB F6 31                     		INC channel_patternOffsetAddr+1,x
0F5BD                           	+
0F5BD 4C 74 F2                  	JMP getNextPatternByte
0F5C0                           
0F5C0                           op_FXX:
0F5C0                           	;; FXX - Set track speed with next byte 
0F5C0 A9 FF                     	LDA #$FF 
0F5C2 38                        	SEC
0F5C3 24 1D                     	BIT soundRegion		;; Subtract 1 from track speed if PAL or Dendy
0F5C5 F0 01                     	BEQ +
0F5C7 18                        		CLC 
0F5C8                           	+
0F5C8 61 30                     	ADC (channel_patternOffsetAddr,x)
0F5CA 8D 6A 01                  	STA trackSpeed
0F5CD F6 30                     	INC channel_patternOffsetAddr,x 
0F5CF D0 02                     	BNE +
0F5D1 F6 31                     		INC channel_patternOffsetAddr+1,x
0F5D3                           	+
0F5D3 A4 07                     	LDY sabreTemp 
0F5D5 4C 74 F2                  	JMP getNextPatternByte
0F5D8                           
0F5D8                           op_ZXX:
0F5D8                           	;; ZXX - Set direct DMC load counter [$4011] with next byte
0F5D8 A1 30                     	LDA (channel_patternOffsetAddr,x)
0F5DA 8D 11 40                  	STA $4011
0F5DD A4 07                     	LDY sabreTemp 
0F5DF 4C 74 F2                  	JMP getNextPatternByte
0F5E2                           
0F5E2                           op_NUL:
0F5E2                           	;; NULL - Null note value. Skip to processing envelopes
0F5E2 A4 07                     	LDY sabreTemp 
0F5E4 B9 23 01                  	LDA channelNoteDuration,y 
0F5E7 99 2C 01                  	STA channelNoteCountdown,y 
0F5EA 4C E7 F2                  	JMP sabre_ProcessChannelEnvelopes
0F5ED                           
0F5ED                           op_END_SFX:
0F5ED                           	;; END_SFX - End SFX playback. Restore current channel
0F5ED 8A                        	TXA 
0F5EE 4A                        	LSR 
0F5EF A8                        	TAY
0F5F0 A9 00                     	LDA #0
0F5F2 95 1F                     	STA channel_trackAddr+1,x 
0F5F4 99 00 01                  	STA apuShadow4000X,y
0F5F7 99 35 01                  	STA channelInstrument,y
0F5FA A4 07                     	LDY sabreTemp 
0F5FC 4C FD F3                  	JMP iterateNextSoundChannel0F5FF                           ;;=========================
0F5FF                           ;; Vectors
0F5FF                               .include "GameEngineData\vectors.asm"
0F5FF 00 00 00 00 00 00 00 00..     .org $fffa
0FFFA A0 C0                         .dw NMI
0FFFC 00 C0                         .dw RESET
0FFFE 00 00                         .dw 0
10000                               10000                           ;;=========================
